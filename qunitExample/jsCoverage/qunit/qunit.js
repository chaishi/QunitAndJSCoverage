/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['qunit/qunit.js']) {
  _$jscoverage['qunit/qunit.js'] = [];
  _$jscoverage['qunit/qunit.js'][11] = 0;
  _$jscoverage['qunit/qunit.js'][13] = 0;
  _$jscoverage['qunit/qunit.js'][21] = 0;
  _$jscoverage['qunit/qunit.js'][22] = 0;
  _$jscoverage['qunit/qunit.js'][23] = 0;
  _$jscoverage['qunit/qunit.js'][24] = 0;
  _$jscoverage['qunit/qunit.js'][25] = 0;
  _$jscoverage['qunit/qunit.js'][27] = 0;
  _$jscoverage['qunit/qunit.js'][32] = 0;
  _$jscoverage['qunit/qunit.js'][33] = 0;
  _$jscoverage['qunit/qunit.js'][34] = 0;
  _$jscoverage['qunit/qunit.js'][35] = 0;
  _$jscoverage['qunit/qunit.js'][36] = 0;
  _$jscoverage['qunit/qunit.js'][37] = 0;
  _$jscoverage['qunit/qunit.js'][38] = 0;
  _$jscoverage['qunit/qunit.js'][41] = 0;
  _$jscoverage['qunit/qunit.js'][43] = 0;
  _$jscoverage['qunit/qunit.js'][46] = 0;
  _$jscoverage['qunit/qunit.js'][47] = 0;
  _$jscoverage['qunit/qunit.js'][48] = 0;
  _$jscoverage['qunit/qunit.js'][50] = 0;
  _$jscoverage['qunit/qunit.js'][51] = 0;
  _$jscoverage['qunit/qunit.js'][52] = 0;
  _$jscoverage['qunit/qunit.js'][53] = 0;
  _$jscoverage['qunit/qunit.js'][55] = 0;
  _$jscoverage['qunit/qunit.js'][59] = 0;
  _$jscoverage['qunit/qunit.js'][60] = 0;
  _$jscoverage['qunit/qunit.js'][61] = 0;
  _$jscoverage['qunit/qunit.js'][68] = 0;
  _$jscoverage['qunit/qunit.js'][69] = 0;
  _$jscoverage['qunit/qunit.js'][70] = 0;
  _$jscoverage['qunit/qunit.js'][73] = 0;
  _$jscoverage['qunit/qunit.js'][74] = 0;
  _$jscoverage['qunit/qunit.js'][79] = 0;
  _$jscoverage['qunit/qunit.js'][81] = 0;
  _$jscoverage['qunit/qunit.js'][86] = 0;
  _$jscoverage['qunit/qunit.js'][93] = 0;
  _$jscoverage['qunit/qunit.js'][95] = 0;
  _$jscoverage['qunit/qunit.js'][96] = 0;
  _$jscoverage['qunit/qunit.js'][98] = 0;
  _$jscoverage['qunit/qunit.js'][99] = 0;
  _$jscoverage['qunit/qunit.js'][100] = 0;
  _$jscoverage['qunit/qunit.js'][102] = 0;
  _$jscoverage['qunit/qunit.js'][103] = 0;
  _$jscoverage['qunit/qunit.js'][105] = 0;
  _$jscoverage['qunit/qunit.js'][109] = 0;
  _$jscoverage['qunit/qunit.js'][111] = 0;
  _$jscoverage['qunit/qunit.js'][113] = 0;
  _$jscoverage['qunit/qunit.js'][114] = 0;
  _$jscoverage['qunit/qunit.js'][117] = 0;
  _$jscoverage['qunit/qunit.js'][118] = 0;
  _$jscoverage['qunit/qunit.js'][121] = 0;
  _$jscoverage['qunit/qunit.js'][122] = 0;
  _$jscoverage['qunit/qunit.js'][123] = 0;
  _$jscoverage['qunit/qunit.js'][126] = 0;
  _$jscoverage['qunit/qunit.js'][127] = 0;
  _$jscoverage['qunit/qunit.js'][129] = 0;
  _$jscoverage['qunit/qunit.js'][131] = 0;
  _$jscoverage['qunit/qunit.js'][134] = 0;
  _$jscoverage['qunit/qunit.js'][135] = 0;
  _$jscoverage['qunit/qunit.js'][140] = 0;
  _$jscoverage['qunit/qunit.js'][141] = 0;
  _$jscoverage['qunit/qunit.js'][142] = 0;
  _$jscoverage['qunit/qunit.js'][143] = 0;
  _$jscoverage['qunit/qunit.js'][145] = 0;
  _$jscoverage['qunit/qunit.js'][146] = 0;
  _$jscoverage['qunit/qunit.js'][148] = 0;
  _$jscoverage['qunit/qunit.js'][151] = 0;
  _$jscoverage['qunit/qunit.js'][154] = 0;
  _$jscoverage['qunit/qunit.js'][155] = 0;
  _$jscoverage['qunit/qunit.js'][156] = 0;
  _$jscoverage['qunit/qunit.js'][157] = 0;
  _$jscoverage['qunit/qunit.js'][158] = 0;
  _$jscoverage['qunit/qunit.js'][161] = 0;
  _$jscoverage['qunit/qunit.js'][166] = 0;
  _$jscoverage['qunit/qunit.js'][167] = 0;
  _$jscoverage['qunit/qunit.js'][169] = 0;
  _$jscoverage['qunit/qunit.js'][170] = 0;
  _$jscoverage['qunit/qunit.js'][172] = 0;
  _$jscoverage['qunit/qunit.js'][173] = 0;
  _$jscoverage['qunit/qunit.js'][175] = 0;
  _$jscoverage['qunit/qunit.js'][176] = 0;
  _$jscoverage['qunit/qunit.js'][177] = 0;
  _$jscoverage['qunit/qunit.js'][178] = 0;
  _$jscoverage['qunit/qunit.js'][180] = 0;
  _$jscoverage['qunit/qunit.js'][181] = 0;
  _$jscoverage['qunit/qunit.js'][183] = 0;
  _$jscoverage['qunit/qunit.js'][184] = 0;
  _$jscoverage['qunit/qunit.js'][185] = 0;
  _$jscoverage['qunit/qunit.js'][190] = 0;
  _$jscoverage['qunit/qunit.js'][191] = 0;
  _$jscoverage['qunit/qunit.js'][192] = 0;
  _$jscoverage['qunit/qunit.js'][194] = 0;
  _$jscoverage['qunit/qunit.js'][198] = 0;
  _$jscoverage['qunit/qunit.js'][199] = 0;
  _$jscoverage['qunit/qunit.js'][203] = 0;
  _$jscoverage['qunit/qunit.js'][204] = 0;
  _$jscoverage['qunit/qunit.js'][207] = 0;
  _$jscoverage['qunit/qunit.js'][208] = 0;
  _$jscoverage['qunit/qunit.js'][209] = 0;
  _$jscoverage['qunit/qunit.js'][211] = 0;
  _$jscoverage['qunit/qunit.js'][212] = 0;
  _$jscoverage['qunit/qunit.js'][214] = 0;
  _$jscoverage['qunit/qunit.js'][217] = 0;
  _$jscoverage['qunit/qunit.js'][218] = 0;
  _$jscoverage['qunit/qunit.js'][219] = 0;
  _$jscoverage['qunit/qunit.js'][220] = 0;
  _$jscoverage['qunit/qunit.js'][222] = 0;
  _$jscoverage['qunit/qunit.js'][223] = 0;
  _$jscoverage['qunit/qunit.js'][230] = 0;
  _$jscoverage['qunit/qunit.js'][231] = 0;
  _$jscoverage['qunit/qunit.js'][232] = 0;
  _$jscoverage['qunit/qunit.js'][233] = 0;
  _$jscoverage['qunit/qunit.js'][234] = 0;
  _$jscoverage['qunit/qunit.js'][235] = 0;
  _$jscoverage['qunit/qunit.js'][238] = 0;
  _$jscoverage['qunit/qunit.js'][239] = 0;
  _$jscoverage['qunit/qunit.js'][240] = 0;
  _$jscoverage['qunit/qunit.js'][241] = 0;
  _$jscoverage['qunit/qunit.js'][242] = 0;
  _$jscoverage['qunit/qunit.js'][247] = 0;
  _$jscoverage['qunit/qunit.js'][255] = 0;
  _$jscoverage['qunit/qunit.js'][259] = 0;
  _$jscoverage['qunit/qunit.js'][262] = 0;
  _$jscoverage['qunit/qunit.js'][263] = 0;
  _$jscoverage['qunit/qunit.js'][265] = 0;
  _$jscoverage['qunit/qunit.js'][267] = 0;
  _$jscoverage['qunit/qunit.js'][268] = 0;
  _$jscoverage['qunit/qunit.js'][270] = 0;
  _$jscoverage['qunit/qunit.js'][271] = 0;
  _$jscoverage['qunit/qunit.js'][273] = 0;
  _$jscoverage['qunit/qunit.js'][274] = 0;
  _$jscoverage['qunit/qunit.js'][276] = 0;
  _$jscoverage['qunit/qunit.js'][277] = 0;
  _$jscoverage['qunit/qunit.js'][283] = 0;
  _$jscoverage['qunit/qunit.js'][286] = 0;
  _$jscoverage['qunit/qunit.js'][287] = 0;
  _$jscoverage['qunit/qunit.js'][289] = 0;
  _$jscoverage['qunit/qunit.js'][295] = 0;
  _$jscoverage['qunit/qunit.js'][299] = 0;
  _$jscoverage['qunit/qunit.js'][300] = 0;
  _$jscoverage['qunit/qunit.js'][304] = 0;
  _$jscoverage['qunit/qunit.js'][305] = 0;
  _$jscoverage['qunit/qunit.js'][306] = 0;
  _$jscoverage['qunit/qunit.js'][309] = 0;
  _$jscoverage['qunit/qunit.js'][313] = 0;
  _$jscoverage['qunit/qunit.js'][316] = 0;
  _$jscoverage['qunit/qunit.js'][317] = 0;
  _$jscoverage['qunit/qunit.js'][318] = 0;
  _$jscoverage['qunit/qunit.js'][321] = 0;
  _$jscoverage['qunit/qunit.js'][322] = 0;
  _$jscoverage['qunit/qunit.js'][325] = 0;
  _$jscoverage['qunit/qunit.js'][326] = 0;
  _$jscoverage['qunit/qunit.js'][329] = 0;
  _$jscoverage['qunit/qunit.js'][330] = 0;
  _$jscoverage['qunit/qunit.js'][331] = 0;
  _$jscoverage['qunit/qunit.js'][332] = 0;
  _$jscoverage['qunit/qunit.js'][333] = 0;
  _$jscoverage['qunit/qunit.js'][338] = 0;
  _$jscoverage['qunit/qunit.js'][344] = 0;
  _$jscoverage['qunit/qunit.js'][345] = 0;
  _$jscoverage['qunit/qunit.js'][347] = 0;
  _$jscoverage['qunit/qunit.js'][349] = 0;
  _$jscoverage['qunit/qunit.js'][355] = 0;
  _$jscoverage['qunit/qunit.js'][356] = 0;
  _$jscoverage['qunit/qunit.js'][358] = 0;
  _$jscoverage['qunit/qunit.js'][359] = 0;
  _$jscoverage['qunit/qunit.js'][360] = 0;
  _$jscoverage['qunit/qunit.js'][361] = 0;
  _$jscoverage['qunit/qunit.js'][362] = 0;
  _$jscoverage['qunit/qunit.js'][365] = 0;
  _$jscoverage['qunit/qunit.js'][366] = 0;
  _$jscoverage['qunit/qunit.js'][375] = 0;
  _$jscoverage['qunit/qunit.js'][379] = 0;
  _$jscoverage['qunit/qunit.js'][383] = 0;
  _$jscoverage['qunit/qunit.js'][387] = 0;
  _$jscoverage['qunit/qunit.js'][391] = 0;
  _$jscoverage['qunit/qunit.js'][395] = 0;
  _$jscoverage['qunit/qunit.js'][399] = 0;
  _$jscoverage['qunit/qunit.js'][402] = 0;
  _$jscoverage['qunit/qunit.js'][403] = 0;
  _$jscoverage['qunit/qunit.js'][404] = 0;
  _$jscoverage['qunit/qunit.js'][407] = 0;
  _$jscoverage['qunit/qunit.js'][408] = 0;
  _$jscoverage['qunit/qunit.js'][410] = 0;
  _$jscoverage['qunit/qunit.js'][413] = 0;
  _$jscoverage['qunit/qunit.js'][415] = 0;
  _$jscoverage['qunit/qunit.js'][416] = 0;
  _$jscoverage['qunit/qunit.js'][418] = 0;
  _$jscoverage['qunit/qunit.js'][419] = 0;
  _$jscoverage['qunit/qunit.js'][421] = 0;
  _$jscoverage['qunit/qunit.js'][422] = 0;
  _$jscoverage['qunit/qunit.js'][424] = 0;
  _$jscoverage['qunit/qunit.js'][425] = 0;
  _$jscoverage['qunit/qunit.js'][429] = 0;
  _$jscoverage['qunit/qunit.js'][433] = 0;
  _$jscoverage['qunit/qunit.js'][435] = 0;
  _$jscoverage['qunit/qunit.js'][436] = 0;
  _$jscoverage['qunit/qunit.js'][439] = 0;
  _$jscoverage['qunit/qunit.js'][440] = 0;
  _$jscoverage['qunit/qunit.js'][443] = 0;
  _$jscoverage['qunit/qunit.js'][444] = 0;
  _$jscoverage['qunit/qunit.js'][445] = 0;
  _$jscoverage['qunit/qunit.js'][446] = 0;
  _$jscoverage['qunit/qunit.js'][448] = 0;
  _$jscoverage['qunit/qunit.js'][449] = 0;
  _$jscoverage['qunit/qunit.js'][452] = 0;
  _$jscoverage['qunit/qunit.js'][453] = 0;
  _$jscoverage['qunit/qunit.js'][456] = 0;
  _$jscoverage['qunit/qunit.js'][457] = 0;
  _$jscoverage['qunit/qunit.js'][462] = 0;
  _$jscoverage['qunit/qunit.js'][463] = 0;
  _$jscoverage['qunit/qunit.js'][465] = 0;
  _$jscoverage['qunit/qunit.js'][466] = 0;
  _$jscoverage['qunit/qunit.js'][467] = 0;
  _$jscoverage['qunit/qunit.js'][468] = 0;
  _$jscoverage['qunit/qunit.js'][469] = 0;
  _$jscoverage['qunit/qunit.js'][470] = 0;
  _$jscoverage['qunit/qunit.js'][477] = 0;
  _$jscoverage['qunit/qunit.js'][478] = 0;
  _$jscoverage['qunit/qunit.js'][479] = 0;
  _$jscoverage['qunit/qunit.js'][480] = 0;
  _$jscoverage['qunit/qunit.js'][482] = 0;
  _$jscoverage['qunit/qunit.js'][487] = 0;
  _$jscoverage['qunit/qunit.js'][488] = 0;
  _$jscoverage['qunit/qunit.js'][490] = 0;
  _$jscoverage['qunit/qunit.js'][491] = 0;
  _$jscoverage['qunit/qunit.js'][496] = 0;
  _$jscoverage['qunit/qunit.js'][527] = 0;
  _$jscoverage['qunit/qunit.js'][528] = 0;
  _$jscoverage['qunit/qunit.js'][535] = 0;
  _$jscoverage['qunit/qunit.js'][536] = 0;
  _$jscoverage['qunit/qunit.js'][537] = 0;
  _$jscoverage['qunit/qunit.js'][538] = 0;
  _$jscoverage['qunit/qunit.js'][540] = 0;
  _$jscoverage['qunit/qunit.js'][541] = 0;
  _$jscoverage['qunit/qunit.js'][545] = 0;
  _$jscoverage['qunit/qunit.js'][546] = 0;
  _$jscoverage['qunit/qunit.js'][549] = 0;
  _$jscoverage['qunit/qunit.js'][554] = 0;
  _$jscoverage['qunit/qunit.js'][555] = 0;
  _$jscoverage['qunit/qunit.js'][556] = 0;
  _$jscoverage['qunit/qunit.js'][560] = 0;
  _$jscoverage['qunit/qunit.js'][565] = 0;
  _$jscoverage['qunit/qunit.js'][578] = 0;
  _$jscoverage['qunit/qunit.js'][581] = 0;
  _$jscoverage['qunit/qunit.js'][582] = 0;
  _$jscoverage['qunit/qunit.js'][590] = 0;
  _$jscoverage['qunit/qunit.js'][591] = 0;
  _$jscoverage['qunit/qunit.js'][592] = 0;
  _$jscoverage['qunit/qunit.js'][594] = 0;
  _$jscoverage['qunit/qunit.js'][595] = 0;
  _$jscoverage['qunit/qunit.js'][598] = 0;
  _$jscoverage['qunit/qunit.js'][599] = 0;
  _$jscoverage['qunit/qunit.js'][602] = 0;
  _$jscoverage['qunit/qunit.js'][603] = 0;
  _$jscoverage['qunit/qunit.js'][606] = 0;
  _$jscoverage['qunit/qunit.js'][607] = 0;
  _$jscoverage['qunit/qunit.js'][608] = 0;
  _$jscoverage['qunit/qunit.js'][609] = 0;
  _$jscoverage['qunit/qunit.js'][610] = 0;
  _$jscoverage['qunit/qunit.js'][611] = 0;
  _$jscoverage['qunit/qunit.js'][618] = 0;
  _$jscoverage['qunit/qunit.js'][620] = 0;
  _$jscoverage['qunit/qunit.js'][621] = 0;
  _$jscoverage['qunit/qunit.js'][623] = 0;
  _$jscoverage['qunit/qunit.js'][624] = 0;
  _$jscoverage['qunit/qunit.js'][625] = 0;
  _$jscoverage['qunit/qunit.js'][633] = 0;
  _$jscoverage['qunit/qunit.js'][634] = 0;
  _$jscoverage['qunit/qunit.js'][635] = 0;
  _$jscoverage['qunit/qunit.js'][638] = 0;
  _$jscoverage['qunit/qunit.js'][639] = 0;
  _$jscoverage['qunit/qunit.js'][640] = 0;
  _$jscoverage['qunit/qunit.js'][646] = 0;
  _$jscoverage['qunit/qunit.js'][650] = 0;
  _$jscoverage['qunit/qunit.js'][651] = 0;
  _$jscoverage['qunit/qunit.js'][654] = 0;
  _$jscoverage['qunit/qunit.js'][655] = 0;
  _$jscoverage['qunit/qunit.js'][658] = 0;
  _$jscoverage['qunit/qunit.js'][660] = 0;
  _$jscoverage['qunit/qunit.js'][662] = 0;
  _$jscoverage['qunit/qunit.js'][663] = 0;
  _$jscoverage['qunit/qunit.js'][665] = 0;
  _$jscoverage['qunit/qunit.js'][672] = 0;
  _$jscoverage['qunit/qunit.js'][674] = 0;
  _$jscoverage['qunit/qunit.js'][675] = 0;
  _$jscoverage['qunit/qunit.js'][677] = 0;
  _$jscoverage['qunit/qunit.js'][681] = 0;
  _$jscoverage['qunit/qunit.js'][682] = 0;
  _$jscoverage['qunit/qunit.js'][685] = 0;
  _$jscoverage['qunit/qunit.js'][693] = 0;
  _$jscoverage['qunit/qunit.js'][694] = 0;
  _$jscoverage['qunit/qunit.js'][695] = 0;
  _$jscoverage['qunit/qunit.js'][697] = 0;
  _$jscoverage['qunit/qunit.js'][698] = 0;
  _$jscoverage['qunit/qunit.js'][699] = 0;
  _$jscoverage['qunit/qunit.js'][700] = 0;
  _$jscoverage['qunit/qunit.js'][702] = 0;
  _$jscoverage['qunit/qunit.js'][703] = 0;
  _$jscoverage['qunit/qunit.js'][704] = 0;
  _$jscoverage['qunit/qunit.js'][707] = 0;
  _$jscoverage['qunit/qunit.js'][709] = 0;
  _$jscoverage['qunit/qunit.js'][710] = 0;
  _$jscoverage['qunit/qunit.js'][711] = 0;
  _$jscoverage['qunit/qunit.js'][714] = 0;
  _$jscoverage['qunit/qunit.js'][717] = 0;
  _$jscoverage['qunit/qunit.js'][719] = 0;
  _$jscoverage['qunit/qunit.js'][726] = 0;
  _$jscoverage['qunit/qunit.js'][732] = 0;
  _$jscoverage['qunit/qunit.js'][733] = 0;
  _$jscoverage['qunit/qunit.js'][734] = 0;
  _$jscoverage['qunit/qunit.js'][736] = 0;
  _$jscoverage['qunit/qunit.js'][737] = 0;
  _$jscoverage['qunit/qunit.js'][738] = 0;
  _$jscoverage['qunit/qunit.js'][741] = 0;
  _$jscoverage['qunit/qunit.js'][743] = 0;
  _$jscoverage['qunit/qunit.js'][750] = 0;
  _$jscoverage['qunit/qunit.js'][751] = 0;
  _$jscoverage['qunit/qunit.js'][754] = 0;
  _$jscoverage['qunit/qunit.js'][755] = 0;
  _$jscoverage['qunit/qunit.js'][756] = 0;
  _$jscoverage['qunit/qunit.js'][758] = 0;
  _$jscoverage['qunit/qunit.js'][761] = 0;
  _$jscoverage['qunit/qunit.js'][772] = 0;
  _$jscoverage['qunit/qunit.js'][790] = 0;
  _$jscoverage['qunit/qunit.js'][791] = 0;
  _$jscoverage['qunit/qunit.js'][794] = 0;
  _$jscoverage['qunit/qunit.js'][795] = 0;
  _$jscoverage['qunit/qunit.js'][798] = 0;
  _$jscoverage['qunit/qunit.js'][802] = 0;
  _$jscoverage['qunit/qunit.js'][803] = 0;
  _$jscoverage['qunit/qunit.js'][805] = 0;
  _$jscoverage['qunit/qunit.js'][807] = 0;
  _$jscoverage['qunit/qunit.js'][809] = 0;
  _$jscoverage['qunit/qunit.js'][810] = 0;
  _$jscoverage['qunit/qunit.js'][811] = 0;
  _$jscoverage['qunit/qunit.js'][812] = 0;
  _$jscoverage['qunit/qunit.js'][816] = 0;
  _$jscoverage['qunit/qunit.js'][817] = 0;
  _$jscoverage['qunit/qunit.js'][818] = 0;
  _$jscoverage['qunit/qunit.js'][822] = 0;
  _$jscoverage['qunit/qunit.js'][823] = 0;
  _$jscoverage['qunit/qunit.js'][824] = 0;
  _$jscoverage['qunit/qunit.js'][825] = 0;
  _$jscoverage['qunit/qunit.js'][826] = 0;
  _$jscoverage['qunit/qunit.js'][827] = 0;
  _$jscoverage['qunit/qunit.js'][828] = 0;
  _$jscoverage['qunit/qunit.js'][833] = 0;
  _$jscoverage['qunit/qunit.js'][834] = 0;
  _$jscoverage['qunit/qunit.js'][836] = 0;
  _$jscoverage['qunit/qunit.js'][837] = 0;
  _$jscoverage['qunit/qunit.js'][838] = 0;
  _$jscoverage['qunit/qunit.js'][840] = 0;
  _$jscoverage['qunit/qunit.js'][841] = 0;
  _$jscoverage['qunit/qunit.js'][844] = 0;
  _$jscoverage['qunit/qunit.js'][845] = 0;
  _$jscoverage['qunit/qunit.js'][847] = 0;
  _$jscoverage['qunit/qunit.js'][848] = 0;
  _$jscoverage['qunit/qunit.js'][850] = 0;
  _$jscoverage['qunit/qunit.js'][851] = 0;
  _$jscoverage['qunit/qunit.js'][852] = 0;
  _$jscoverage['qunit/qunit.js'][854] = 0;
  _$jscoverage['qunit/qunit.js'][859] = 0;
  _$jscoverage['qunit/qunit.js'][860] = 0;
  _$jscoverage['qunit/qunit.js'][862] = 0;
  _$jscoverage['qunit/qunit.js'][863] = 0;
  _$jscoverage['qunit/qunit.js'][865] = 0;
  _$jscoverage['qunit/qunit.js'][868] = 0;
  _$jscoverage['qunit/qunit.js'][869] = 0;
  _$jscoverage['qunit/qunit.js'][870] = 0;
  _$jscoverage['qunit/qunit.js'][871] = 0;
  _$jscoverage['qunit/qunit.js'][875] = 0;
  _$jscoverage['qunit/qunit.js'][876] = 0;
  _$jscoverage['qunit/qunit.js'][877] = 0;
  _$jscoverage['qunit/qunit.js'][880] = 0;
  _$jscoverage['qunit/qunit.js'][881] = 0;
  _$jscoverage['qunit/qunit.js'][885] = 0;
  _$jscoverage['qunit/qunit.js'][888] = 0;
  _$jscoverage['qunit/qunit.js'][889] = 0;
  _$jscoverage['qunit/qunit.js'][890] = 0;
  _$jscoverage['qunit/qunit.js'][892] = 0;
  _$jscoverage['qunit/qunit.js'][893] = 0;
  _$jscoverage['qunit/qunit.js'][898] = 0;
  _$jscoverage['qunit/qunit.js'][899] = 0;
  _$jscoverage['qunit/qunit.js'][902] = 0;
  _$jscoverage['qunit/qunit.js'][903] = 0;
  _$jscoverage['qunit/qunit.js'][911] = 0;
  _$jscoverage['qunit/qunit.js'][929] = 0;
  _$jscoverage['qunit/qunit.js'][930] = 0;
  _$jscoverage['qunit/qunit.js'][933] = 0;
  _$jscoverage['qunit/qunit.js'][934] = 0;
  _$jscoverage['qunit/qunit.js'][937] = 0;
  _$jscoverage['qunit/qunit.js'][940] = 0;
  _$jscoverage['qunit/qunit.js'][947] = 0;
  _$jscoverage['qunit/qunit.js'][949] = 0;
  _$jscoverage['qunit/qunit.js'][950] = 0;
  _$jscoverage['qunit/qunit.js'][951] = 0;
  _$jscoverage['qunit/qunit.js'][952] = 0;
  _$jscoverage['qunit/qunit.js'][957] = 0;
  _$jscoverage['qunit/qunit.js'][965] = 0;
  _$jscoverage['qunit/qunit.js'][966] = 0;
  _$jscoverage['qunit/qunit.js'][970] = 0;
  _$jscoverage['qunit/qunit.js'][971] = 0;
  _$jscoverage['qunit/qunit.js'][974] = 0;
  _$jscoverage['qunit/qunit.js'][976] = 0;
  _$jscoverage['qunit/qunit.js'][977] = 0;
  _$jscoverage['qunit/qunit.js'][980] = 0;
  _$jscoverage['qunit/qunit.js'][981] = 0;
  _$jscoverage['qunit/qunit.js'][984] = 0;
  _$jscoverage['qunit/qunit.js'][985] = 0;
  _$jscoverage['qunit/qunit.js'][988] = 0;
  _$jscoverage['qunit/qunit.js'][994] = 0;
  _$jscoverage['qunit/qunit.js'][995] = 0;
  _$jscoverage['qunit/qunit.js'][997] = 0;
  _$jscoverage['qunit/qunit.js'][999] = 0;
  _$jscoverage['qunit/qunit.js'][1001] = 0;
  _$jscoverage['qunit/qunit.js'][1002] = 0;
  _$jscoverage['qunit/qunit.js'][1004] = 0;
  _$jscoverage['qunit/qunit.js'][1005] = 0;
  _$jscoverage['qunit/qunit.js'][1006] = 0;
  _$jscoverage['qunit/qunit.js'][1008] = 0;
  _$jscoverage['qunit/qunit.js'][1009] = 0;
  _$jscoverage['qunit/qunit.js'][1013] = 0;
  _$jscoverage['qunit/qunit.js'][1014] = 0;
  _$jscoverage['qunit/qunit.js'][1017] = 0;
  _$jscoverage['qunit/qunit.js'][1020] = 0;
  _$jscoverage['qunit/qunit.js'][1021] = 0;
  _$jscoverage['qunit/qunit.js'][1022] = 0;
  _$jscoverage['qunit/qunit.js'][1024] = 0;
  _$jscoverage['qunit/qunit.js'][1028] = 0;
  _$jscoverage['qunit/qunit.js'][1029] = 0;
  _$jscoverage['qunit/qunit.js'][1030] = 0;
  _$jscoverage['qunit/qunit.js'][1032] = 0;
  _$jscoverage['qunit/qunit.js'][1033] = 0;
  _$jscoverage['qunit/qunit.js'][1034] = 0;
  _$jscoverage['qunit/qunit.js'][1035] = 0;
  _$jscoverage['qunit/qunit.js'][1036] = 0;
  _$jscoverage['qunit/qunit.js'][1037] = 0;
  _$jscoverage['qunit/qunit.js'][1038] = 0;
  _$jscoverage['qunit/qunit.js'][1043] = 0;
  _$jscoverage['qunit/qunit.js'][1044] = 0;
  _$jscoverage['qunit/qunit.js'][1046] = 0;
  _$jscoverage['qunit/qunit.js'][1047] = 0;
  _$jscoverage['qunit/qunit.js'][1051] = 0;
  _$jscoverage['qunit/qunit.js'][1052] = 0;
  _$jscoverage['qunit/qunit.js'][1053] = 0;
  _$jscoverage['qunit/qunit.js'][1055] = 0;
  _$jscoverage['qunit/qunit.js'][1056] = 0;
  _$jscoverage['qunit/qunit.js'][1058] = 0;
  _$jscoverage['qunit/qunit.js'][1059] = 0;
  _$jscoverage['qunit/qunit.js'][1060] = 0;
  _$jscoverage['qunit/qunit.js'][1062] = 0;
  _$jscoverage['qunit/qunit.js'][1063] = 0;
  _$jscoverage['qunit/qunit.js'][1066] = 0;
  _$jscoverage['qunit/qunit.js'][1067] = 0;
  _$jscoverage['qunit/qunit.js'][1068] = 0;
  _$jscoverage['qunit/qunit.js'][1072] = 0;
  _$jscoverage['qunit/qunit.js'][1073] = 0;
  _$jscoverage['qunit/qunit.js'][1075] = 0;
  _$jscoverage['qunit/qunit.js'][1076] = 0;
  _$jscoverage['qunit/qunit.js'][1078] = 0;
  _$jscoverage['qunit/qunit.js'][1079] = 0;
  _$jscoverage['qunit/qunit.js'][1081] = 0;
  _$jscoverage['qunit/qunit.js'][1086] = 0;
  _$jscoverage['qunit/qunit.js'][1087] = 0;
  _$jscoverage['qunit/qunit.js'][1091] = 0;
  _$jscoverage['qunit/qunit.js'][1093] = 0;
  _$jscoverage['qunit/qunit.js'][1094] = 0;
  _$jscoverage['qunit/qunit.js'][1095] = 0;
  _$jscoverage['qunit/qunit.js'][1098] = 0;
  _$jscoverage['qunit/qunit.js'][1099] = 0;
  _$jscoverage['qunit/qunit.js'][1100] = 0;
  _$jscoverage['qunit/qunit.js'][1105] = 0;
  _$jscoverage['qunit/qunit.js'][1106] = 0;
  _$jscoverage['qunit/qunit.js'][1109] = 0;
  _$jscoverage['qunit/qunit.js'][1110] = 0;
  _$jscoverage['qunit/qunit.js'][1111] = 0;
  _$jscoverage['qunit/qunit.js'][1112] = 0;
  _$jscoverage['qunit/qunit.js'][1113] = 0;
  _$jscoverage['qunit/qunit.js'][1114] = 0;
  _$jscoverage['qunit/qunit.js'][1118] = 0;
  _$jscoverage['qunit/qunit.js'][1121] = 0;
  _$jscoverage['qunit/qunit.js'][1122] = 0;
  _$jscoverage['qunit/qunit.js'][1123] = 0;
  _$jscoverage['qunit/qunit.js'][1124] = 0;
  _$jscoverage['qunit/qunit.js'][1127] = 0;
  _$jscoverage['qunit/qunit.js'][1128] = 0;
  _$jscoverage['qunit/qunit.js'][1132] = 0;
  _$jscoverage['qunit/qunit.js'][1135] = 0;
  _$jscoverage['qunit/qunit.js'][1136] = 0;
  _$jscoverage['qunit/qunit.js'][1137] = 0;
  _$jscoverage['qunit/qunit.js'][1138] = 0;
  _$jscoverage['qunit/qunit.js'][1139] = 0;
  _$jscoverage['qunit/qunit.js'][1141] = 0;
  _$jscoverage['qunit/qunit.js'][1145] = 0;
  _$jscoverage['qunit/qunit.js'][1146] = 0;
  _$jscoverage['qunit/qunit.js'][1150] = 0;
  _$jscoverage['qunit/qunit.js'][1151] = 0;
  _$jscoverage['qunit/qunit.js'][1152] = 0;
  _$jscoverage['qunit/qunit.js'][1157] = 0;
  _$jscoverage['qunit/qunit.js'][1159] = 0;
  _$jscoverage['qunit/qunit.js'][1160] = 0;
  _$jscoverage['qunit/qunit.js'][1161] = 0;
  _$jscoverage['qunit/qunit.js'][1163] = 0;
  _$jscoverage['qunit/qunit.js'][1164] = 0;
  _$jscoverage['qunit/qunit.js'][1165] = 0;
  _$jscoverage['qunit/qunit.js'][1172] = 0;
  _$jscoverage['qunit/qunit.js'][1175] = 0;
  _$jscoverage['qunit/qunit.js'][1176] = 0;
  _$jscoverage['qunit/qunit.js'][1177] = 0;
  _$jscoverage['qunit/qunit.js'][1178] = 0;
  _$jscoverage['qunit/qunit.js'][1179] = 0;
  _$jscoverage['qunit/qunit.js'][1181] = 0;
  _$jscoverage['qunit/qunit.js'][1187] = 0;
  _$jscoverage['qunit/qunit.js'][1194] = 0;
  _$jscoverage['qunit/qunit.js'][1199] = 0;
  _$jscoverage['qunit/qunit.js'][1200] = 0;
  _$jscoverage['qunit/qunit.js'][1205] = 0;
  _$jscoverage['qunit/qunit.js'][1207] = 0;
  _$jscoverage['qunit/qunit.js'][1211] = 0;
  _$jscoverage['qunit/qunit.js'][1219] = 0;
  _$jscoverage['qunit/qunit.js'][1223] = 0;
  _$jscoverage['qunit/qunit.js'][1227] = 0;
  _$jscoverage['qunit/qunit.js'][1241] = 0;
  _$jscoverage['qunit/qunit.js'][1242] = 0;
  _$jscoverage['qunit/qunit.js'][1246] = 0;
  _$jscoverage['qunit/qunit.js'][1249] = 0;
  _$jscoverage['qunit/qunit.js'][1250] = 0;
  _$jscoverage['qunit/qunit.js'][1253] = 0;
  _$jscoverage['qunit/qunit.js'][1254] = 0;
  _$jscoverage['qunit/qunit.js'][1256] = 0;
  _$jscoverage['qunit/qunit.js'][1260] = 0;
  _$jscoverage['qunit/qunit.js'][1261] = 0;
  _$jscoverage['qunit/qunit.js'][1262] = 0;
  _$jscoverage['qunit/qunit.js'][1263] = 0;
  _$jscoverage['qunit/qunit.js'][1264] = 0;
  _$jscoverage['qunit/qunit.js'][1265] = 0;
  _$jscoverage['qunit/qunit.js'][1268] = 0;
  _$jscoverage['qunit/qunit.js'][1269] = 0;
  _$jscoverage['qunit/qunit.js'][1270] = 0;
  _$jscoverage['qunit/qunit.js'][1273] = 0;
  _$jscoverage['qunit/qunit.js'][1274] = 0;
  _$jscoverage['qunit/qunit.js'][1278] = 0;
  _$jscoverage['qunit/qunit.js'][1286] = 0;
  _$jscoverage['qunit/qunit.js'][1289] = 0;
  _$jscoverage['qunit/qunit.js'][1291] = 0;
  _$jscoverage['qunit/qunit.js'][1296] = 0;
  _$jscoverage['qunit/qunit.js'][1298] = 0;
  _$jscoverage['qunit/qunit.js'][1300] = 0;
  _$jscoverage['qunit/qunit.js'][1302] = 0;
  _$jscoverage['qunit/qunit.js'][1303] = 0;
  _$jscoverage['qunit/qunit.js'][1304] = 0;
  _$jscoverage['qunit/qunit.js'][1306] = 0;
  _$jscoverage['qunit/qunit.js'][1309] = 0;
  _$jscoverage['qunit/qunit.js'][1311] = 0;
  _$jscoverage['qunit/qunit.js'][1312] = 0;
  _$jscoverage['qunit/qunit.js'][1313] = 0;
  _$jscoverage['qunit/qunit.js'][1317] = 0;
  _$jscoverage['qunit/qunit.js'][1318] = 0;
  _$jscoverage['qunit/qunit.js'][1320] = 0;
  _$jscoverage['qunit/qunit.js'][1321] = 0;
  _$jscoverage['qunit/qunit.js'][1325] = 0;
  _$jscoverage['qunit/qunit.js'][1330] = 0;
  _$jscoverage['qunit/qunit.js'][1331] = 0;
  _$jscoverage['qunit/qunit.js'][1332] = 0;
  _$jscoverage['qunit/qunit.js'][1333] = 0;
  _$jscoverage['qunit/qunit.js'][1336] = 0;
  _$jscoverage['qunit/qunit.js'][1337] = 0;
  _$jscoverage['qunit/qunit.js'][1338] = 0;
  _$jscoverage['qunit/qunit.js'][1339] = 0;
  _$jscoverage['qunit/qunit.js'][1342] = 0;
  _$jscoverage['qunit/qunit.js'][1344] = 0;
  _$jscoverage['qunit/qunit.js'][1351] = 0;
  _$jscoverage['qunit/qunit.js'][1364] = 0;
  _$jscoverage['qunit/qunit.js'][1365] = 0;
  _$jscoverage['qunit/qunit.js'][1366] = 0;
  _$jscoverage['qunit/qunit.js'][1368] = 0;
  _$jscoverage['qunit/qunit.js'][1369] = 0;
  _$jscoverage['qunit/qunit.js'][1371] = 0;
  _$jscoverage['qunit/qunit.js'][1372] = 0;
  _$jscoverage['qunit/qunit.js'][1375] = 0;
  _$jscoverage['qunit/qunit.js'][1376] = 0;
  _$jscoverage['qunit/qunit.js'][1378] = 0;
  _$jscoverage['qunit/qunit.js'][1379] = 0;
  _$jscoverage['qunit/qunit.js'][1381] = 0;
  _$jscoverage['qunit/qunit.js'][1383] = 0;
  _$jscoverage['qunit/qunit.js'][1384] = 0;
  _$jscoverage['qunit/qunit.js'][1385] = 0;
  _$jscoverage['qunit/qunit.js'][1386] = 0;
  _$jscoverage['qunit/qunit.js'][1387] = 0;
  _$jscoverage['qunit/qunit.js'][1389] = 0;
  _$jscoverage['qunit/qunit.js'][1390] = 0;
  _$jscoverage['qunit/qunit.js'][1393] = 0;
  _$jscoverage['qunit/qunit.js'][1396] = 0;
  _$jscoverage['qunit/qunit.js'][1397] = 0;
  _$jscoverage['qunit/qunit.js'][1400] = 0;
  _$jscoverage['qunit/qunit.js'][1401] = 0;
  _$jscoverage['qunit/qunit.js'][1403] = 0;
  _$jscoverage['qunit/qunit.js'][1404] = 0;
  _$jscoverage['qunit/qunit.js'][1407] = 0;
  _$jscoverage['qunit/qunit.js'][1408] = 0;
  _$jscoverage['qunit/qunit.js'][1409] = 0;
  _$jscoverage['qunit/qunit.js'][1410] = 0;
  _$jscoverage['qunit/qunit.js'][1411] = 0;
  _$jscoverage['qunit/qunit.js'][1414] = 0;
  _$jscoverage['qunit/qunit.js'][1417] = 0;
  _$jscoverage['qunit/qunit.js'][1418] = 0;
  _$jscoverage['qunit/qunit.js'][1419] = 0;
  _$jscoverage['qunit/qunit.js'][1420] = 0;
  _$jscoverage['qunit/qunit.js'][1421] = 0;
  _$jscoverage['qunit/qunit.js'][1422] = 0;
  _$jscoverage['qunit/qunit.js'][1423] = 0;
  _$jscoverage['qunit/qunit.js'][1424] = 0;
  _$jscoverage['qunit/qunit.js'][1425] = 0;
  _$jscoverage['qunit/qunit.js'][1426] = 0;
  _$jscoverage['qunit/qunit.js'][1427] = 0;
  _$jscoverage['qunit/qunit.js'][1428] = 0;
  _$jscoverage['qunit/qunit.js'][1429] = 0;
  _$jscoverage['qunit/qunit.js'][1430] = 0;
  _$jscoverage['qunit/qunit.js'][1431] = 0;
  _$jscoverage['qunit/qunit.js'][1432] = 0;
  _$jscoverage['qunit/qunit.js'][1433] = 0;
  _$jscoverage['qunit/qunit.js'][1434] = 0;
  _$jscoverage['qunit/qunit.js'][1440] = 0;
  _$jscoverage['qunit/qunit.js'][1442] = 0;
  _$jscoverage['qunit/qunit.js'][1444] = 0;
  _$jscoverage['qunit/qunit.js'][1447] = 0;
  _$jscoverage['qunit/qunit.js'][1450] = 0;
  _$jscoverage['qunit/qunit.js'][1451] = 0;
  _$jscoverage['qunit/qunit.js'][1453] = 0;
  _$jscoverage['qunit/qunit.js'][1454] = 0;
  _$jscoverage['qunit/qunit.js'][1455] = 0;
  _$jscoverage['qunit/qunit.js'][1457] = 0;
  _$jscoverage['qunit/qunit.js'][1460] = 0;
  _$jscoverage['qunit/qunit.js'][1463] = 0;
  _$jscoverage['qunit/qunit.js'][1466] = 0;
  _$jscoverage['qunit/qunit.js'][1483] = 0;
  _$jscoverage['qunit/qunit.js'][1486] = 0;
  _$jscoverage['qunit/qunit.js'][1487] = 0;
  _$jscoverage['qunit/qunit.js'][1489] = 0;
  _$jscoverage['qunit/qunit.js'][1491] = 0;
  _$jscoverage['qunit/qunit.js'][1492] = 0;
  _$jscoverage['qunit/qunit.js'][1498] = 0;
  _$jscoverage['qunit/qunit.js'][1499] = 0;
  _$jscoverage['qunit/qunit.js'][1500] = 0;
  _$jscoverage['qunit/qunit.js'][1501] = 0;
  _$jscoverage['qunit/qunit.js'][1503] = 0;
  _$jscoverage['qunit/qunit.js'][1504] = 0;
  _$jscoverage['qunit/qunit.js'][1505] = 0;
  _$jscoverage['qunit/qunit.js'][1508] = 0;
  _$jscoverage['qunit/qunit.js'][1509] = 0;
  _$jscoverage['qunit/qunit.js'][1510] = 0;
  _$jscoverage['qunit/qunit.js'][1511] = 0;
  _$jscoverage['qunit/qunit.js'][1512] = 0;
  _$jscoverage['qunit/qunit.js'][1514] = 0;
  _$jscoverage['qunit/qunit.js'][1515] = 0;
  _$jscoverage['qunit/qunit.js'][1518] = 0;
  _$jscoverage['qunit/qunit.js'][1524] = 0;
  _$jscoverage['qunit/qunit.js'][1525] = 0;
  _$jscoverage['qunit/qunit.js'][1526] = 0;
  _$jscoverage['qunit/qunit.js'][1527] = 0;
  _$jscoverage['qunit/qunit.js'][1530] = 0;
  _$jscoverage['qunit/qunit.js'][1533] = 0;
  _$jscoverage['qunit/qunit.js'][1536] = 0;
  _$jscoverage['qunit/qunit.js'][1537] = 0;
  _$jscoverage['qunit/qunit.js'][1540] = 0;
  _$jscoverage['qunit/qunit.js'][1541] = 0;
  _$jscoverage['qunit/qunit.js'][1542] = 0;
  _$jscoverage['qunit/qunit.js'][1544] = 0;
  _$jscoverage['qunit/qunit.js'][1566] = 0;
  _$jscoverage['qunit/qunit.js'][1570] = 0;
  _$jscoverage['qunit/qunit.js'][1571] = 0;
  _$jscoverage['qunit/qunit.js'][1574] = 0;
  _$jscoverage['qunit/qunit.js'][1575] = 0;
  _$jscoverage['qunit/qunit.js'][1578] = 0;
  _$jscoverage['qunit/qunit.js'][1579] = 0;
  _$jscoverage['qunit/qunit.js'][1582] = 0;
  _$jscoverage['qunit/qunit.js'][1583] = 0;
  _$jscoverage['qunit/qunit.js'][1587] = 0;
  _$jscoverage['qunit/qunit.js'][1591] = 0;
  _$jscoverage['qunit/qunit.js'][1592] = 0;
  _$jscoverage['qunit/qunit.js'][1593] = 0;
  _$jscoverage['qunit/qunit.js'][1596] = 0;
  _$jscoverage['qunit/qunit.js'][1597] = 0;
  _$jscoverage['qunit/qunit.js'][1598] = 0;
  _$jscoverage['qunit/qunit.js'][1602] = 0;
  _$jscoverage['qunit/qunit.js'][1619] = 0;
  _$jscoverage['qunit/qunit.js'][1620] = 0;
  _$jscoverage['qunit/qunit.js'][1621] = 0;
  _$jscoverage['qunit/qunit.js'][1625] = 0;
  _$jscoverage['qunit/qunit.js'][1626] = 0;
  _$jscoverage['qunit/qunit.js'][1627] = 0;
  _$jscoverage['qunit/qunit.js'][1632] = 0;
  _$jscoverage['qunit/qunit.js'][1635] = 0;
  _$jscoverage['qunit/qunit.js'][1636] = 0;
  _$jscoverage['qunit/qunit.js'][1637] = 0;
  _$jscoverage['qunit/qunit.js'][1642] = 0;
  _$jscoverage['qunit/qunit.js'][1645] = 0;
  _$jscoverage['qunit/qunit.js'][1646] = 0;
  _$jscoverage['qunit/qunit.js'][1647] = 0;
  _$jscoverage['qunit/qunit.js'][1649] = 0;
  _$jscoverage['qunit/qunit.js'][1650] = 0;
  _$jscoverage['qunit/qunit.js'][1654] = 0;
  _$jscoverage['qunit/qunit.js'][1661] = 0;
  _$jscoverage['qunit/qunit.js'][1662] = 0;
  _$jscoverage['qunit/qunit.js'][1665] = 0;
  _$jscoverage['qunit/qunit.js'][1669] = 0;
  _$jscoverage['qunit/qunit.js'][1676] = 0;
  _$jscoverage['qunit/qunit.js'][1677] = 0;
  _$jscoverage['qunit/qunit.js'][1680] = 0;
  _$jscoverage['qunit/qunit.js'][1684] = 0;
  _$jscoverage['qunit/qunit.js'][1691] = 0;
  _$jscoverage['qunit/qunit.js'][1697] = 0;
  _$jscoverage['qunit/qunit.js'][1698] = 0;
  _$jscoverage['qunit/qunit.js'][1699] = 0;
  _$jscoverage['qunit/qunit.js'][1701] = 0;
  _$jscoverage['qunit/qunit.js'][1707] = 0;
  _$jscoverage['qunit/qunit.js'][1708] = 0;
  _$jscoverage['qunit/qunit.js'][1711] = 0;
  _$jscoverage['qunit/qunit.js'][1714] = 0;
  _$jscoverage['qunit/qunit.js'][1715] = 0;
  _$jscoverage['qunit/qunit.js'][1718] = 0;
  _$jscoverage['qunit/qunit.js'][1721] = 0;
  _$jscoverage['qunit/qunit.js'][1722] = 0;
  _$jscoverage['qunit/qunit.js'][1723] = 0;
  _$jscoverage['qunit/qunit.js'][1727] = 0;
  _$jscoverage['qunit/qunit.js'][1728] = 0;
  _$jscoverage['qunit/qunit.js'][1729] = 0;
  _$jscoverage['qunit/qunit.js'][1733] = 0;
  _$jscoverage['qunit/qunit.js'][1734] = 0;
  _$jscoverage['qunit/qunit.js'][1735] = 0;
  _$jscoverage['qunit/qunit.js'][1739] = 0;
  _$jscoverage['qunit/qunit.js'][1741] = 0;
  _$jscoverage['qunit/qunit.js'][1742] = 0;
  _$jscoverage['qunit/qunit.js'][1744] = 0;
  _$jscoverage['qunit/qunit.js'][1749] = 0;
  _$jscoverage['qunit/qunit.js'][1754] = 0;
  _$jscoverage['qunit/qunit.js'][1755] = 0;
  _$jscoverage['qunit/qunit.js'][1759] = 0;
}
_$jscoverage['qunit/qunit.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * QUnit v1.7.0pre - A JavaScript Unit Testing Framework</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * http://docs.jquery.com/QUnit</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Copyright (c) 2012 John Resig, J&#195;&#182;rn Zaefferer</span>","<span class=\"c\"> * Dual licensed under the MIT (MIT-LICENSE.txt)</span>","<span class=\"c\"> * or GPL (GPL-LICENSE.txt) licenses.</span>","<span class=\"c\"> */</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span> window <span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> QUnit<span class=\"k\">,</span>","\tconfig<span class=\"k\">,</span>","\ttestId <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\ttoString <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">,</span>","\thasOwn <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">,</span>","\tdefined <span class=\"k\">=</span> <span class=\"k\">{</span>","\tsetTimeout<span class=\"k\">:</span> <span class=\"k\">typeof</span> window<span class=\"k\">.</span>setTimeout <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">,</span>","\tsessionStorage<span class=\"k\">:</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> x <span class=\"k\">=</span> <span class=\"s\">\"qunit-test-string\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\tsessionStorage<span class=\"k\">.</span>setItem<span class=\"k\">(</span> x<span class=\"k\">,</span> x <span class=\"k\">);</span>","\t\t\tsessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span> x <span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">())</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">function</span> Test<span class=\"k\">(</span> name<span class=\"k\">,</span> testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> async<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> name<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">=</span> testName<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>async <span class=\"k\">=</span> async<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>callback <span class=\"k\">=</span> callback<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>assertions <span class=\"k\">=</span> <span class=\"k\">[];</span>","<span class=\"k\">}</span>","","Test<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","\tinit<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> b<span class=\"k\">,</span> li<span class=\"k\">,</span>","        tests <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tb <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"strong\"</span> <span class=\"k\">);</span>","\t\t\tb<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Running \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>name<span class=\"k\">;</span>","","\t\t\tli <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"li\"</span> <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"running\"</span><span class=\"k\">;</span>","\t\t\tli<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-test-output\"</span> <span class=\"k\">+</span> testId<span class=\"k\">++;</span>","","\t\t\ttests<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> li <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\tsetup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">!==</span> config<span class=\"k\">.</span>previousModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>previousModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"moduleDone\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\t\tname<span class=\"k\">:</span> config<span class=\"k\">.</span>previousModule<span class=\"k\">,</span>","\t\t\t\t\tfailed<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\t\t\tpassed<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">-</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\t\t\ttotal<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tconfig<span class=\"k\">.</span>previousModule <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">;</span>","\t\t\tconfig<span class=\"k\">.</span>moduleStats <span class=\"k\">=</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"moduleStart\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\tname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>autorun <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"moduleStart\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\tname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">=</span> extend<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tsetup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\tteardown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>moduleTestEnvironment <span class=\"k\">);</span>","","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"testStart\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span>","\t\t\tmodule<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"c\">// allow utility functions to access the current test environment</span>","\t\t<span class=\"c\">// TODO why??</span>","\t\tQUnit<span class=\"k\">.</span>current_testEnvironment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>pollution <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tsaveGlobal<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>notrycatch <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">.</span>setup<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">.</span>setup<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Setup failed on \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>message<span class=\"k\">,</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\trun<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">var</span> running <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-testresult\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> running <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trunning<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Running: &lt;br/&gt;\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>name<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>async <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>stop<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>notrycatch <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Died on test #\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>message<span class=\"k\">,</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t<span class=\"c\">// else next test will carry the responsibility</span>","\t\t\tsaveGlobal<span class=\"k\">();</span>","","\t\t\t<span class=\"c\">// Restart the tests if they're blocking</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>start<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\tteardown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>notrycatch <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">.</span>teardown<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">.</span>teardown<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Teardown failed on \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>message<span class=\"k\">,</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\tcheckPollution<span class=\"k\">();</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\tfinish<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">!=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Expected \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">+</span> <span class=\"s\">\" assertions, but \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">\" were run\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">var</span> assertion<span class=\"k\">,</span> a<span class=\"k\">,</span> b<span class=\"k\">,</span> i<span class=\"k\">,</span> li<span class=\"k\">,</span> ol<span class=\"k\">,</span>","\t\t\tgood <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\t\t\tbad <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\t\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","","\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tol <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"ol\"</span> <span class=\"k\">);</span>","","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tassertion <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">[</span>i<span class=\"k\">];</span>","","\t\t\t\tli <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"li\"</span> <span class=\"k\">);</span>","\t\t\t\tli<span class=\"k\">.</span>className <span class=\"k\">=</span> assertion<span class=\"k\">.</span>result <span class=\"k\">?</span> <span class=\"s\">\"pass\"</span> <span class=\"k\">:</span> <span class=\"s\">\"fail\"</span><span class=\"k\">;</span>","\t\t\t\tli<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> assertion<span class=\"k\">.</span>message <span class=\"k\">||</span> <span class=\"k\">(</span> assertion<span class=\"k\">.</span>result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed\"</span> <span class=\"k\">);</span>","\t\t\t\tol<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> li <span class=\"k\">);</span>","","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> assertion<span class=\"k\">.</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tgood<span class=\"k\">++;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tbad<span class=\"k\">++;</span>","\t\t\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"c\">// store result when possible</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>reorder <span class=\"k\">&amp;&amp;</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> bad <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tsessionStorage<span class=\"k\">.</span>setItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span> bad <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tsessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> bad <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tol<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"c\">// `b` initialized at top of scope</span>","\t\t\tb <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"strong\"</span> <span class=\"k\">);</span>","\t\t\tb<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">+</span> <span class=\"s\">\" &lt;b class='counts'&gt;(&lt;b class='failed'&gt;\"</span> <span class=\"k\">+</span> bad <span class=\"k\">+</span> <span class=\"s\">\"&lt;/b&gt;, &lt;b class='passed'&gt;\"</span> <span class=\"k\">+</span> good <span class=\"k\">+</span> <span class=\"s\">\"&lt;/b&gt;, \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">\")&lt;/b&gt;\"</span><span class=\"k\">;</span>","","\t\t\t<span class=\"c\">// `a` initialized at top of scope</span>","\t\t\ta <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"a\"</span> <span class=\"k\">);</span>","\t\t\ta<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Rerun\"</span><span class=\"k\">;</span>","\t\t\ta<span class=\"k\">.</span>href <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span><span class=\"k\">{</span> filter<span class=\"k\">:</span> getText<span class=\"k\">([</span>b<span class=\"k\">]).</span>replace<span class=\"k\">(</span> <span class=\"s\">/\\([^)]+\\)$/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">).</span>replace<span class=\"k\">(</span> <span class=\"s\">/(^\\s*|\\s*$)/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span> <span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t\taddEvent<span class=\"k\">(</span>b<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> next <span class=\"k\">=</span> b<span class=\"k\">.</span>nextSibling<span class=\"k\">.</span>nextSibling<span class=\"k\">,</span>","\t\t\t\t\tdisplay <span class=\"k\">=</span> next<span class=\"k\">.</span>style<span class=\"k\">.</span>display<span class=\"k\">;</span>","\t\t\t\tnext<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> display <span class=\"k\">===</span> <span class=\"s\">\"none\"</span> <span class=\"k\">?</span> <span class=\"s\">\"block\"</span> <span class=\"k\">:</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t\taddEvent<span class=\"k\">(</span>b<span class=\"k\">,</span> <span class=\"s\">\"dblclick\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> target <span class=\"k\">=</span> e <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">.</span>target <span class=\"k\">?</span> e<span class=\"k\">.</span>target <span class=\"k\">:</span> window<span class=\"k\">.</span>event<span class=\"k\">.</span>srcElement<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> target<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">==</span> <span class=\"s\">\"span\"</span> <span class=\"k\">||</span> target<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">==</span> <span class=\"s\">\"b\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttarget <span class=\"k\">=</span> target<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>location <span class=\"k\">&amp;&amp;</span> target<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">===</span> <span class=\"s\">\"strong\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\twindow<span class=\"k\">.</span>location <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t\t\t\tfilter<span class=\"k\">:</span> getText<span class=\"k\">([</span>target<span class=\"k\">]).</span>replace<span class=\"k\">(</span> <span class=\"s\">/\\([^)]+\\)$/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">).</span>replace<span class=\"k\">(</span> <span class=\"s\">/(^\\s*|\\s*$)/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span>","\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t\t<span class=\"c\">// `li` initialized at top of scope</span>","\t\t\tli <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>className <span class=\"k\">=</span> bad <span class=\"k\">?</span> <span class=\"s\">\"fail\"</span> <span class=\"k\">:</span> <span class=\"s\">\"pass\"</span><span class=\"k\">;</span>","\t\t\tli<span class=\"k\">.</span>removeChild<span class=\"k\">(</span> li<span class=\"k\">.</span>firstChild <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> a <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> ol <span class=\"k\">);</span>","","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">[</span>i<span class=\"k\">].</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tbad<span class=\"k\">++;</span>","\t\t\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"testDone\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span>","\t\t\tmodule<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">,</span>","\t\t\tfailed<span class=\"k\">:</span> bad<span class=\"k\">,</span>","\t\t\tpassed<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">-</span> bad<span class=\"k\">,</span>","\t\t\ttotal<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\tQUnit<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tqueue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> bad<span class=\"k\">,</span>","\t\t\ttest <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\ttest<span class=\"k\">.</span>init<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">function</span> run<span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">// each of these can by async</span>","\t\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\ttest<span class=\"k\">.</span>setup<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\ttest<span class=\"k\">.</span>run<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\ttest<span class=\"k\">.</span>teardown<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\ttest<span class=\"k\">.</span>finish<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"c\">// `bad` initialized at top of scope</span>","\t\t<span class=\"c\">// defer when previous test run passed, if storage is available</span>","\t\tbad <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>reorder <span class=\"k\">&amp;&amp;</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\t<span class=\"k\">+</span>sessionStorage<span class=\"k\">.</span>getItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> bad <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trun<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tsynchronize<span class=\"k\">(</span> run<span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// `QUnit` initialized at top of scope</span>","QUnit <span class=\"k\">=</span> <span class=\"k\">{</span>","","\t<span class=\"c\">// call on start of module test to prepend name to all tests</span>","\tmodule<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> name<span class=\"k\">,</span> testEnvironment <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>currentModule <span class=\"k\">=</span> name<span class=\"k\">;</span>","\t\tconfig<span class=\"k\">.</span>currentModuleTestEnviroment <span class=\"k\">=</span> testEnvironment<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tasyncTest<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcallback <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\tQUnit<span class=\"k\">.</span>test<span class=\"k\">(</span> testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback<span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\ttest<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback<span class=\"k\">,</span> async <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> test<span class=\"k\">,</span>","\t\t\tname <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-name'&gt;\"</span> <span class=\"k\">+</span> escapeInnerText<span class=\"k\">(</span> testName <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcallback <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tname <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='module-name'&gt;\"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;: \"</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>validTest<span class=\"k\">(</span>config<span class=\"k\">.</span>currentModule <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> testName<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\ttest <span class=\"k\">=</span> <span class=\"k\">new</span> Test<span class=\"k\">(</span> name<span class=\"k\">,</span> testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> async<span class=\"k\">,</span> callback <span class=\"k\">);</span>","\t\ttest<span class=\"k\">.</span>module <span class=\"k\">=</span> config<span class=\"k\">.</span>currentModule<span class=\"k\">;</span>","\t\ttest<span class=\"k\">.</span>moduleTestEnvironment <span class=\"k\">=</span> config<span class=\"k\">.</span>currentModuleTestEnviroment<span class=\"k\">;</span>","\t\ttest<span class=\"k\">.</span>stack <span class=\"k\">=</span> sourceFromStacktrace<span class=\"k\">(</span> <span class=\"s\">2</span> <span class=\"k\">);</span>","\t\ttest<span class=\"k\">.</span>queue<span class=\"k\">();</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Specify the number of expected assertions to gurantee that failed test (no assertions are run at all) don't slip through.</span>","\texpect<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> asserts <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>expected <span class=\"k\">=</span> asserts<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Asserts true.</span>","\t<span class=\"c\">// @example ok( \"asdfasdf\".length &gt; 5, \"There must be at least 5 chars\" );</span>","\tok<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> result<span class=\"k\">,</span> msg <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>current <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">\"ok() assertion outside test context, was \"</span> <span class=\"k\">+</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\tresult <span class=\"k\">=</span> <span class=\"k\">!!</span>result<span class=\"k\">;</span>","","\t\t<span class=\"k\">var</span> source<span class=\"k\">,</span>","\t\t\tdetails <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\tresult<span class=\"k\">:</span> result<span class=\"k\">,</span>","\t\t\t\tmessage<span class=\"k\">:</span> msg","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t\tmsg <span class=\"k\">=</span> escapeInnerText<span class=\"k\">(</span> msg <span class=\"k\">||</span> <span class=\"k\">(</span>result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed\"</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\tmsg <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-message'&gt;\"</span> <span class=\"k\">+</span> msg <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tsource <span class=\"k\">=</span> sourceFromStacktrace<span class=\"k\">(</span> <span class=\"s\">2</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tdetails<span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","\t\t\t\tmsg <span class=\"k\">+=</span> <span class=\"s\">\"&lt;table&gt;&lt;tr class='test-source'&gt;&lt;th&gt;Source: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeInnerText<span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"log\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> details <span class=\"k\">);</span>","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">:</span> result<span class=\"k\">,</span>","\t\t\tmessage<span class=\"k\">:</span> msg","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Checks that the first two arguments are equal, with an optional message. Prints out both actual and expected values.</span>","\t<span class=\"c\">// @example equal( format( \"Received {0} bytes.\", 2), \"Received 2 bytes.\" );</span>","\tequal<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> expected <span class=\"k\">==</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tnotEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> expected <span class=\"k\">!=</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tdeepEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tnotDeepEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">!</span>QUnit<span class=\"k\">.</span>equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tstrictEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> expected <span class=\"k\">===</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tnotStrictEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> expected <span class=\"k\">!==</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\traises<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> block<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> actual<span class=\"k\">,</span>","\t\t\tok <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> expected <span class=\"k\">===</span> <span class=\"s\">\"string\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tmessage <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\tblock<span class=\"k\">.</span>call<span class=\"k\">(</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tactual <span class=\"k\">=</span> e<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> actual <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">// we don't want to validate thrown error</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>expected <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tok <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"c\">// expected is a regexp</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> expected <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"regexp\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tok <span class=\"k\">=</span> expected<span class=\"k\">.</span>test<span class=\"k\">(</span> actual <span class=\"k\">);</span>","\t\t\t<span class=\"c\">// expected is a constructor</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> actual <span class=\"k\">instanceof</span> expected <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tok <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"c\">// expected is a validation function which returns true is validation passed</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> expected<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">{}</span><span class=\"k\">,</span> actual <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tok <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> ok<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tstart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> count <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>semaphore <span class=\"k\">-=</span> count <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t<span class=\"c\">// don't start until equal number of stop-calls</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>semaphore <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"c\">// ignore if start is called more often then stop</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>semaphore <span class=\"k\">&lt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>semaphore <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"c\">// A slight delay, to avoid any current callbacks</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> defined<span class=\"k\">.</span>setTimeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\twindow<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>semaphore <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>timeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tclearTimeout<span class=\"k\">(</span> config<span class=\"k\">.</span>timeout <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\tprocess<span class=\"k\">(</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">13</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\tprocess<span class=\"k\">(</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tstop<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> count <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>semaphore <span class=\"k\">+=</span> count <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>testTimeout <span class=\"k\">&amp;&amp;</span> defined<span class=\"k\">.</span>setTimeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tclearTimeout<span class=\"k\">(</span> config<span class=\"k\">.</span>timeout <span class=\"k\">);</span>","\t\t\tconfig<span class=\"k\">.</span>timeout <span class=\"k\">=</span> window<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Test timed out\"</span> <span class=\"k\">);</span>","\t\t\t\tconfig<span class=\"k\">.</span>semaphore <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t\tQUnit<span class=\"k\">.</span>start<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> config<span class=\"k\">.</span>testTimeout <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// We want access to the constructor's prototype</span>","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">function</span> F<span class=\"k\">()</span> <span class=\"k\">{}</span>","\tF<span class=\"k\">.</span>prototype <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","\tQUnit <span class=\"k\">=</span> <span class=\"k\">new</span> F<span class=\"k\">();</span>","\t<span class=\"c\">// Make F QUnit's constructor so that we can add to the prototype later</span>","\tQUnit<span class=\"k\">.</span>constructor <span class=\"k\">=</span> F<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">// deprecated; still export them to window to provide clear error messages</span>","<span class=\"c\">// next step: remove entirely</span>","QUnit<span class=\"k\">.</span>equals <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"QUnit.equals has been deprecated since 2009 (e88049a0), use QUnit.equal instead\"</span> <span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","QUnit<span class=\"k\">.</span>same <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"QUnit.same has been deprecated since 2009 (e88049a0), use QUnit.deepEqual instead\"</span> <span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// Maintain internal state</span>","<span class=\"c\">// `config` initialized at top of scope</span>","config <span class=\"k\">=</span> <span class=\"k\">{</span>","\t<span class=\"c\">// The queue of tests to run</span>","\tqueue<span class=\"k\">:</span> <span class=\"k\">[],</span>","","\t<span class=\"c\">// block until document ready</span>","\tblocking<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","\t<span class=\"c\">// when enabled, show only failing tests</span>","\t<span class=\"c\">// gets persisted through sessionStorage and can be changed in UI via checkbox</span>","\thidepassed<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","","\t<span class=\"c\">// by default, run previously failed tests first</span>","\t<span class=\"c\">// very useful in combination with \"Hide passed tests\" checked</span>","\treorder<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","\t<span class=\"c\">// by default, modify document.title when suite is done</span>","\taltertitle<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","\turlConfig<span class=\"k\">:</span> <span class=\"k\">[</span> <span class=\"s\">\"noglobals\"</span><span class=\"k\">,</span> <span class=\"s\">\"notrycatch\"</span> <span class=\"k\">],</span>","","\t<span class=\"c\">// logging callback queues</span>","\tbegin<span class=\"k\">:</span> <span class=\"k\">[],</span>","\tdone<span class=\"k\">:</span> <span class=\"k\">[],</span>","\tlog<span class=\"k\">:</span> <span class=\"k\">[],</span>","\ttestStart<span class=\"k\">:</span> <span class=\"k\">[],</span>","\ttestDone<span class=\"k\">:</span> <span class=\"k\">[],</span>","\tmoduleStart<span class=\"k\">:</span> <span class=\"k\">[],</span>","\tmoduleDone<span class=\"k\">:</span> <span class=\"k\">[]</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// Load paramaters</span>","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i<span class=\"k\">,</span>","\t\tlocation <span class=\"k\">=</span> window<span class=\"k\">.</span>location <span class=\"k\">||</span> <span class=\"k\">{</span> search<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> protocol<span class=\"k\">:</span> <span class=\"s\">\"file:\"</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\tparams <span class=\"k\">=</span> location<span class=\"k\">.</span>search<span class=\"k\">.</span>slice<span class=\"k\">(</span> <span class=\"s\">1</span> <span class=\"k\">).</span>split<span class=\"k\">(</span> <span class=\"s\">\"&amp;\"</span> <span class=\"k\">),</span>","\t\tlength <span class=\"k\">=</span> params<span class=\"k\">.</span>length<span class=\"k\">,</span>","\t\turlParams <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\tcurrent<span class=\"k\">;</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> params<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcurrent <span class=\"k\">=</span> params<span class=\"k\">[</span> i <span class=\"k\">].</span>split<span class=\"k\">(</span> <span class=\"s\">\"=\"</span> <span class=\"k\">);</span>","\t\t\tcurrent<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">]</span> <span class=\"k\">=</span> decodeURIComponent<span class=\"k\">(</span> current<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","\t\t\t<span class=\"c\">// allow just a key to turn on a flag, e.g., test.html?noglobals</span>","\t\t\tcurrent<span class=\"k\">[</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> current<span class=\"k\">[</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">?</span> decodeURIComponent<span class=\"k\">(</span> current<span class=\"k\">[</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\turlParams<span class=\"k\">[</span> current<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> current<span class=\"k\">[</span> <span class=\"s\">1</span> <span class=\"k\">];</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\tQUnit<span class=\"k\">.</span>urlParams <span class=\"k\">=</span> urlParams<span class=\"k\">;</span>","\tconfig<span class=\"k\">.</span>filter <span class=\"k\">=</span> urlParams<span class=\"k\">.</span>filter<span class=\"k\">;</span>","","\t<span class=\"c\">// Figure out if we're running the tests from a server or not</span>","\tQUnit<span class=\"k\">.</span>isLocal <span class=\"k\">=</span> location<span class=\"k\">.</span>protocol <span class=\"k\">===</span> <span class=\"s\">\"file:\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">// Expose the API as global variables, unless an 'exports' object exists,</span>","<span class=\"c\">// in that case we assume we're in CommonJS - export everything at the end</span>","<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> exports <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\textend<span class=\"k\">(</span> window<span class=\"k\">,</span> QUnit <span class=\"k\">);</span>","\twindow<span class=\"k\">.</span>QUnit <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">// define these after exposing globals to keep them in these QUnit namespace only</span>","extend<span class=\"k\">(</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">:</span> config<span class=\"k\">,</span>","","\t<span class=\"c\">// Initialize the configuration options</span>","\tinit<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\textend<span class=\"k\">(</span> config<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tstats<span class=\"k\">:</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tmoduleStats<span class=\"k\">:</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tstarted<span class=\"k\">:</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">(),</span>","\t\t\tupdateRate<span class=\"k\">:</span> <span class=\"s\">1000</span><span class=\"k\">,</span>","\t\t\tblocking<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\tautostart<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","\t\t\tautorun<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\tfilter<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","\t\t\tqueue<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t\t\tsemaphore<span class=\"k\">:</span> <span class=\"s\">0</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">var</span> tests<span class=\"k\">,</span> banner<span class=\"k\">,</span> result<span class=\"k\">,</span>","\t\t\tqunit <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> qunit <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tqunit<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span>","\t\t\t\t<span class=\"s\">\"&lt;h1 id='qunit-header'&gt;\"</span> <span class=\"k\">+</span> escapeInnerText<span class=\"k\">(</span> document<span class=\"k\">.</span>title <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/h1&gt;\"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&lt;h2 id='qunit-banner'&gt;&lt;/h2&gt;\"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&lt;div id='qunit-testrunner-toolbar'&gt;&lt;/div&gt;\"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&lt;h2 id='qunit-userAgent'&gt;&lt;/h2&gt;\"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&lt;ol id='qunit-tests'&gt;&lt;/ol&gt;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","\t\tbanner <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-banner\"</span> <span class=\"k\">);</span>","\t\tresult <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-testresult\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\ttests<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> banner <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tbanner<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span> result <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tresult <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"p\"</span> <span class=\"k\">);</span>","\t\t\tresult<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-testresult\"</span><span class=\"k\">;</span>","\t\t\tresult<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"result\"</span><span class=\"k\">;</span>","\t\t\ttests<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span> result<span class=\"k\">,</span> tests <span class=\"k\">);</span>","\t\t\tresult<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Running...&lt;br/&gt;&amp;nbsp;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Resets the test setup. Useful for tests that modify the DOM.</span>","\t<span class=\"c\">// If jQuery is available, uses jQuery's html(), otherwise just innerHTML.</span>","\treset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> fixture<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>jQuery <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tjQuery<span class=\"k\">(</span> <span class=\"s\">\"#qunit-fixture\"</span> <span class=\"k\">).</span>html<span class=\"k\">(</span> config<span class=\"k\">.</span>fixture <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tfixture <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-fixture\"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> fixture <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tfixture<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> config<span class=\"k\">.</span>fixture<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Trigger an event on an element.</span>","\t<span class=\"c\">// @example triggerEvent( document.body, \"click\" );</span>","\ttriggerEvent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> elem<span class=\"k\">,</span> type<span class=\"k\">,</span> event <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> document<span class=\"k\">.</span>createEvent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tevent <span class=\"k\">=</span> document<span class=\"k\">.</span>createEvent<span class=\"k\">(</span> <span class=\"s\">\"MouseEvents\"</span> <span class=\"k\">);</span>","\t\t\tevent<span class=\"k\">.</span>initMouseEvent<span class=\"k\">(</span>type<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> elem<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>defaultView<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","","\t\t\telem<span class=\"k\">.</span>dispatchEvent<span class=\"k\">(</span> event <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>fireEvent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\telem<span class=\"k\">.</span>fireEvent<span class=\"k\">(</span> <span class=\"s\">\"on\"</span> <span class=\"k\">+</span> type <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Safe object type checking</span>","\tis<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> type<span class=\"k\">,</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">==</span> type<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tobjectType<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","\t\t<span class=\"c\">// consider: typeof null === object</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> obj <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"null\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">var</span> type <span class=\"k\">=</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span> obj <span class=\"k\">).</span>match<span class=\"k\">(</span><span class=\"s\">/^\\[object\\s(.*)\\]$/</span><span class=\"k\">)[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">switch</span> <span class=\"k\">(</span> type <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Number\"</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> isNaN<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"nan\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"number\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"String\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Boolean\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Array\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Date\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"RegExp\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Function\"</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">return</span> type<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"object\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"object\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> undefined<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tpush<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> result<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>current <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">\"assertion outside test context, was \"</span> <span class=\"k\">+</span> sourceFromStacktrace<span class=\"k\">()</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">var</span> output<span class=\"k\">,</span> source<span class=\"k\">,</span>","\t\t\tdetails <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\tresult<span class=\"k\">:</span> result<span class=\"k\">,</span>","\t\t\t\tmessage<span class=\"k\">:</span> message<span class=\"k\">,</span>","\t\t\t\tactual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","\t\t\t\texpected<span class=\"k\">:</span> expected","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t\tmessage <span class=\"k\">=</span> escapeInnerText<span class=\"k\">(</span> message <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">(</span> result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed\"</span> <span class=\"k\">);</span>","\t\tmessage <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-message'&gt;\"</span> <span class=\"k\">+</span> message <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","\t\toutput <span class=\"k\">=</span> message<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\texpected <span class=\"k\">=</span> escapeInnerText<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span>expected<span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\tactual <span class=\"k\">=</span> escapeInnerText<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span>actual<span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;table&gt;&lt;tr class='test-expected'&gt;&lt;th&gt;Expected: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> expected <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> actual <span class=\"k\">!=</span> expected <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-actual'&gt;&lt;th&gt;Result: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> actual <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","\t\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-diff'&gt;&lt;th&gt;Diff: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>diff<span class=\"k\">(</span> expected<span class=\"k\">,</span> actual <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\tsource <span class=\"k\">=</span> sourceFromStacktrace<span class=\"k\">();</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tdetails<span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","\t\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-source'&gt;&lt;th&gt;Source: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeInnerText<span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;/table&gt;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"log\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> details <span class=\"k\">);</span>","","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">:</span> <span class=\"k\">!!</span>result<span class=\"k\">,</span>","\t\t\tmessage<span class=\"k\">:</span> output","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tpushFailure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> message<span class=\"k\">,</span> source <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> output<span class=\"k\">,</span>","\t\t\tdetails <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\tresult<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\tmessage<span class=\"k\">:</span> message","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t\tmessage <span class=\"k\">=</span> escapeInnerText<span class=\"k\">(</span>message <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">\"error\"</span><span class=\"k\">;</span>","\t\tmessage <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-message'&gt;\"</span> <span class=\"k\">+</span> message <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","\t\toutput <span class=\"k\">=</span> message<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tdetails<span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;table&gt;&lt;tr class='test-source'&gt;&lt;th&gt;Source: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeInnerText<span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"log\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> details <span class=\"k\">);</span>","","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\tmessage<span class=\"k\">:</span> output","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\turl<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> params <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tparams <span class=\"k\">=</span> extend<span class=\"k\">(</span> extend<span class=\"k\">(</span> <span class=\"k\">{}</span><span class=\"k\">,</span> QUnit<span class=\"k\">.</span>urlParams <span class=\"k\">),</span> params <span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> key<span class=\"k\">,</span>","\t\t\tquerystring <span class=\"k\">=</span> <span class=\"s\">\"?\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> key <span class=\"k\">in</span> params <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> params<span class=\"k\">,</span> key <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">continue</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tquerystring <span class=\"k\">+=</span> encodeURIComponent<span class=\"k\">(</span> key <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span>","\t\t\t\tencodeURIComponent<span class=\"k\">(</span> params<span class=\"k\">[</span> key <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&amp;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> window<span class=\"k\">.</span>location<span class=\"k\">.</span>pathname <span class=\"k\">+</span> querystring<span class=\"k\">.</span>slice<span class=\"k\">(</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\textend<span class=\"k\">:</span> extend<span class=\"k\">,</span>","\tid<span class=\"k\">:</span> id<span class=\"k\">,</span>","\taddEvent<span class=\"k\">:</span> addEvent","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">// QUnit.constructor is set to the empty F() above so that we can add to it's prototype later</span>","<span class=\"c\">// Doing this allows us to tell if the following methods have been overwritten on the actual</span>","<span class=\"c\">// QUnit object, which is a deprecated way of using the callbacks.</span>","extend<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>constructor<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"k\">{</span>","\t<span class=\"c\">// Logging callbacks; all receive a single argument with the listed properties</span>","\t<span class=\"c\">// run test/logs.html for any related changes</span>","\tbegin<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"begin\"</span> <span class=\"k\">),</span>","\t<span class=\"c\">// done: { failed, passed, total, runtime }</span>","\tdone<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"done\"</span> <span class=\"k\">),</span>","\t<span class=\"c\">// log: { result, actual, expected, message }</span>","\tlog<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"log\"</span> <span class=\"k\">),</span>","\t<span class=\"c\">// testStart: { name }</span>","\ttestStart<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"testStart\"</span> <span class=\"k\">),</span>","\t<span class=\"c\">// testDone: { name, failed, passed, total }</span>","\ttestDone<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"testDone\"</span> <span class=\"k\">),</span>","\t<span class=\"c\">// moduleStart: { name }</span>","\tmoduleStart<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"moduleStart\"</span> <span class=\"k\">),</span>","\t<span class=\"c\">// moduleDone: { name, failed, passed, total }</span>","\tmoduleDone<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"moduleDone\"</span> <span class=\"k\">)</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> document <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> document<span class=\"k\">.</span>readyState <span class=\"k\">===</span> <span class=\"s\">\"complete\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>autorun <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","QUnit<span class=\"k\">.</span>load <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"begin\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{}</span> <span class=\"k\">);</span>","","\t<span class=\"c\">// Initialize the config, saving the execution queue</span>","\t<span class=\"k\">var</span> banner<span class=\"k\">,</span> filter<span class=\"k\">,</span> i<span class=\"k\">,</span> label<span class=\"k\">,</span> len<span class=\"k\">,</span> main<span class=\"k\">,</span> ol<span class=\"k\">,</span> toolbar<span class=\"k\">,</span> userAgent<span class=\"k\">,</span> val<span class=\"k\">,</span>","\t\turlConfigHtml <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","\t\toldconfig <span class=\"k\">=</span> extend<span class=\"k\">(</span> <span class=\"k\">{}</span><span class=\"k\">,</span> config <span class=\"k\">);</span>","","\tQUnit<span class=\"k\">.</span>init<span class=\"k\">();</span>","\textend<span class=\"k\">(</span>config<span class=\"k\">,</span> oldconfig<span class=\"k\">);</span>","","\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\tlen <span class=\"k\">=</span> config<span class=\"k\">.</span>urlConfig<span class=\"k\">.</span>length<span class=\"k\">;</span>","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tval <span class=\"k\">=</span> config<span class=\"k\">.</span>urlConfig<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\tconfig<span class=\"k\">[</span>val<span class=\"k\">]</span> <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>urlParams<span class=\"k\">[</span>val<span class=\"k\">];</span>","\t\turlConfigHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;label&gt;&lt;input name='\"</span> <span class=\"k\">+</span> val <span class=\"k\">+</span> <span class=\"s\">\"' type='checkbox'\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span> config<span class=\"k\">[</span>val<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"s\">\" checked='checked'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span> <span class=\"k\">+</span> val <span class=\"k\">+</span> <span class=\"s\">\"&lt;/label&gt;\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// `userAgent` initialized at top of scope</span>","\tuserAgent <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-userAgent\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> userAgent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tuserAgent<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// `banner` initialized at top of scope</span>","\tbanner <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-header\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> banner <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tbanner<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"&lt;a href='\"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span><span class=\"k\">{</span> filter<span class=\"k\">:</span> undefined <span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'&gt;\"</span> <span class=\"k\">+</span> banner<span class=\"k\">.</span>innerHTML <span class=\"k\">+</span> <span class=\"s\">\"&lt;/a&gt; \"</span> <span class=\"k\">+</span> urlConfigHtml<span class=\"k\">;</span>","\t\taddEvent<span class=\"k\">(</span> banner<span class=\"k\">,</span> <span class=\"s\">\"change\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> event <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t\tparams<span class=\"k\">[</span> event<span class=\"k\">.</span>target<span class=\"k\">.</span>name <span class=\"k\">]</span> <span class=\"k\">=</span> event<span class=\"k\">.</span>target<span class=\"k\">.</span>checked <span class=\"k\">?</span> <span class=\"k\">true</span> <span class=\"k\">:</span> undefined<span class=\"k\">;</span>","\t\t\twindow<span class=\"k\">.</span>location <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span> params <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// `toolbar` initialized at top of scope</span>","\ttoolbar <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-testrunner-toolbar\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> toolbar <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// `filter` initialized at top of scope</span>","\t\tfilter <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"input\"</span> <span class=\"k\">);</span>","\t\tfilter<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"checkbox\"</span><span class=\"k\">;</span>","\t\tfilter<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-filter-pass\"</span><span class=\"k\">;</span>","","\t\taddEvent<span class=\"k\">(</span> filter<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> tmp<span class=\"k\">,</span>","\t\t\t\tol <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> filter<span class=\"k\">.</span>checked <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tol<span class=\"k\">.</span>className <span class=\"k\">=</span> ol<span class=\"k\">.</span>className <span class=\"k\">+</span> <span class=\"s\">\" hidepass\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\ttmp <span class=\"k\">=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> ol<span class=\"k\">.</span>className<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/[\\n\\t\\r]/g</span><span class=\"k\">,</span> <span class=\"s\">\" \"</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","\t\t\t\tol<span class=\"k\">.</span>className <span class=\"k\">=</span> tmp<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/ hidepass /</span><span class=\"k\">,</span> <span class=\"s\">\" \"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>filter<span class=\"k\">.</span>checked<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tsessionStorage<span class=\"k\">.</span>setItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-filter-passed-tests\"</span><span class=\"k\">,</span> <span class=\"s\">\"true\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tsessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-filter-passed-tests\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>hidepassed <span class=\"k\">||</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">&amp;&amp;</span> sessionStorage<span class=\"k\">.</span>getItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-filter-passed-tests\"</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tfilter<span class=\"k\">.</span>checked <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"c\">// `ol` initialized at top of scope</span>","\t\t\tol <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","\t\t\tol<span class=\"k\">.</span>className <span class=\"k\">=</span> ol<span class=\"k\">.</span>className <span class=\"k\">+</span> <span class=\"s\">\" hidepass\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> filter <span class=\"k\">);</span>","","\t\t<span class=\"c\">// `label` initialized at top of scope</span>","\t\tlabel <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"label\"</span> <span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span> <span class=\"s\">\"for\"</span><span class=\"k\">,</span> <span class=\"s\">\"qunit-filter-pass\"</span> <span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Hide passed tests\"</span><span class=\"k\">;</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> label <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// `main` initialized at top of scope</span>","\tmain <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-fixture\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> main <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>fixture <span class=\"k\">=</span> main<span class=\"k\">.</span>innerHTML<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>autostart <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>start<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","addEvent<span class=\"k\">(</span> window<span class=\"k\">,</span> <span class=\"s\">\"load\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">.</span>load <span class=\"k\">);</span>","","<span class=\"c\">// addEvent(window, \"error\" ) gives us a useless event object</span>","window<span class=\"k\">.</span>onerror <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> message<span class=\"k\">,</span> file<span class=\"k\">,</span> line <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>current <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> message<span class=\"k\">,</span> file <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> line <span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>test<span class=\"k\">(</span> <span class=\"s\">\"global failure\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> message<span class=\"k\">,</span> file <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> line <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">function</span> done<span class=\"k\">()</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>autorun <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","\t<span class=\"c\">// Log the last module results</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"moduleDone\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tname<span class=\"k\">:</span> config<span class=\"k\">.</span>currentModule<span class=\"k\">,</span>","\t\t\tfailed<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\tpassed<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">-</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\ttotal<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">var</span> i<span class=\"k\">,</span> key<span class=\"k\">,</span>","\t\tbanner <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-banner\"</span> <span class=\"k\">),</span>","\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">),</span>","\t\truntime <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">-</span> config<span class=\"k\">.</span>started<span class=\"k\">,</span>","\t\tpassed <span class=\"k\">=</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">-</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\thtml <span class=\"k\">=</span> <span class=\"k\">[</span>","\t\t\t<span class=\"s\">\"Tests completed in \"</span><span class=\"k\">,</span>","\t\t\truntime<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\" milliseconds.&lt;br/&gt;\"</span><span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"&lt;span class='passed'&gt;\"</span><span class=\"k\">,</span>","\t\t\tpassed<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"&lt;/span&gt; tests of &lt;span class='total'&gt;\"</span><span class=\"k\">,</span>","\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>all<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"&lt;/span&gt; passed, &lt;span class='failed'&gt;\"</span><span class=\"k\">,</span>","\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"&lt;/span&gt; failed.\"</span>","\t\t<span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> banner <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tbanner<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad <span class=\"k\">?</span> <span class=\"s\">\"qunit-fail\"</span> <span class=\"k\">:</span> <span class=\"s\">\"qunit-pass\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tid<span class=\"k\">(</span> <span class=\"s\">\"qunit-testresult\"</span> <span class=\"k\">).</span>innerHTML <span class=\"k\">=</span> html<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>altertitle <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> document <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> document<span class=\"k\">.</span>title <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// show &#226;&#156;&#150; for good, &#226;&#156;&#148; for bad suite result in title</span>","\t\t<span class=\"c\">// use escape sequences in case file gets loaded with non-utf-8-charset</span>","\t\tdocument<span class=\"k\">.</span>title <span class=\"k\">=</span> <span class=\"k\">[</span>","\t\t\t<span class=\"k\">(</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad <span class=\"k\">?</span> <span class=\"s\">\"</span><span class=\"t\">\\u</span><span class=\"s\">2716\"</span> <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\u</span><span class=\"s\">2714\"</span> <span class=\"k\">),</span>","\t\t\tdocument<span class=\"k\">.</span>title<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/^[\\u2714\\u2716] /i</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span>","\t\t<span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">\" \"</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// clear own sessionStorage items if all tests passed</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>reorder <span class=\"k\">&amp;&amp;</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// `key` &amp; `i` initialized at top of scope</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> sessionStorage<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tkey <span class=\"k\">=</span> sessionStorage<span class=\"k\">.</span>key<span class=\"k\">(</span> i<span class=\"k\">++</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tsessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span> key <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"done\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\tfailed<span class=\"k\">:</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\tpassed<span class=\"k\">:</span> passed<span class=\"k\">,</span>","\t\ttotal<span class=\"k\">:</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all<span class=\"k\">,</span>","\t\truntime<span class=\"k\">:</span> runtime","\t<span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> validTest<span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> not<span class=\"k\">,</span>","\t\tfilter <span class=\"k\">=</span> config<span class=\"k\">.</span>filter<span class=\"k\">,</span>","\t\trun <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>filter <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\tnot <span class=\"k\">=</span> filter<span class=\"k\">.</span>charAt<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"!\"</span><span class=\"k\">;</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> not <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tfilter <span class=\"k\">=</span> filter<span class=\"k\">.</span>slice<span class=\"k\">(</span> <span class=\"s\">1</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> name<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> filter <span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">!</span>not<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> not <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\trun <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> run<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">// so far supports only Firefox, Chrome and Opera (buggy), Safari (for real exceptions)</span>","<span class=\"c\">// Later Safari and IE10 are supposed to support error.stack as well</span>","<span class=\"c\">// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack</span>","<span class=\"k\">function</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> offset <span class=\"k\">)</span> <span class=\"k\">{</span>","\toffset <span class=\"k\">=</span> offset <span class=\"k\">||</span> <span class=\"s\">3</span><span class=\"k\">;</span>","","\t<span class=\"k\">var</span> stack<span class=\"k\">;</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>stacktrace <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Opera</span>","\t\t<span class=\"k\">return</span> e<span class=\"k\">.</span>stacktrace<span class=\"k\">.</span>split<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">)[</span> offset <span class=\"k\">+</span> <span class=\"s\">3</span> <span class=\"k\">];</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>stack <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Firefox, Chrome</span>","\t\tstack <span class=\"k\">=</span> e<span class=\"k\">.</span>stack<span class=\"k\">.</span>split<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/^error$/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span> stack<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tstack<span class=\"k\">.</span>shift<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> stack<span class=\"k\">[</span> offset <span class=\"k\">];</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>sourceURL <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Safari, PhantomJS</span>","\t\t<span class=\"c\">// hopefully one day Safari provides actual stacktraces</span>","\t\t<span class=\"c\">// exclude useless self-reference for generated Error objects</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"s\">/qunit.js$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span> e<span class=\"k\">.</span>sourceURL <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"c\">// for actual exceptions, this is useful</span>","\t\t<span class=\"k\">return</span> e<span class=\"k\">.</span>sourceURL <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>line<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","<span class=\"k\">function</span> sourceFromStacktrace<span class=\"k\">(</span> offset <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">();</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> offset <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> escapeInnerText<span class=\"k\">(</span> s <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>s <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\ts <span class=\"k\">=</span> s <span class=\"k\">+</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">return</span> s<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/[\\&amp;&lt;&gt;]/g</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> s <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">switch</span><span class=\"k\">(</span> s <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"&amp;\"</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">\"&amp;amp;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"&lt;\"</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">\"&amp;lt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">\"&amp;gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">default</span><span class=\"k\">:</span> <span class=\"k\">return</span> s<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> synchronize<span class=\"k\">(</span> callback<span class=\"k\">,</span> last <span class=\"k\">)</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>queue<span class=\"k\">.</span>push<span class=\"k\">(</span> callback <span class=\"k\">);</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>autorun <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tprocess<span class=\"k\">(</span> last <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> process<span class=\"k\">(</span> last <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">function</span> next<span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tprocess<span class=\"k\">(</span> last <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">var</span> start <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">();</span>","\tconfig<span class=\"k\">.</span>depth <span class=\"k\">=</span> config<span class=\"k\">.</span>depth <span class=\"k\">?</span> config<span class=\"k\">.</span>depth <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","\t<span class=\"k\">while</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>defined<span class=\"k\">.</span>setTimeout <span class=\"k\">||</span> config<span class=\"k\">.</span>updateRate <span class=\"k\">&lt;=</span> <span class=\"s\">0</span> <span class=\"k\">||</span> <span class=\"k\">(</span> <span class=\"k\">(</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">()</span> <span class=\"k\">-</span> start <span class=\"k\">)</span> <span class=\"k\">&lt;</span> config<span class=\"k\">.</span>updateRate <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>queue<span class=\"k\">.</span>shift<span class=\"k\">()();</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\twindow<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span> next<span class=\"k\">,</span> <span class=\"s\">13</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\tconfig<span class=\"k\">.</span>depth<span class=\"k\">--;</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> last <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>depth <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tdone<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> saveGlobal<span class=\"k\">()</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>pollution <span class=\"k\">=</span> <span class=\"k\">[];</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>noglobals <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> key <span class=\"k\">in</span> window <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">// in Opera sometimes DOM element ids show up here, ignore them</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> window<span class=\"k\">,</span> key <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">/^qunit-test-output/</span><span class=\"k\">.</span>test<span class=\"k\">(</span> key <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">continue</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tconfig<span class=\"k\">.</span>pollution<span class=\"k\">.</span>push<span class=\"k\">(</span> key <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> checkPollution<span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> newGlobals<span class=\"k\">,</span>","\t\tdeletedGlobals<span class=\"k\">,</span>","\t\told <span class=\"k\">=</span> config<span class=\"k\">.</span>pollution<span class=\"k\">;</span>","","\tsaveGlobal<span class=\"k\">();</span>","","\tnewGlobals <span class=\"k\">=</span> diff<span class=\"k\">(</span> config<span class=\"k\">.</span>pollution<span class=\"k\">,</span> old <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> newGlobals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Introduced global variable(s): \"</span> <span class=\"k\">+</span> newGlobals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\tdeletedGlobals <span class=\"k\">=</span> diff<span class=\"k\">(</span> old<span class=\"k\">,</span> config<span class=\"k\">.</span>pollution <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> deletedGlobals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Deleted global variable(s): \"</span> <span class=\"k\">+</span> deletedGlobals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">// returns a new Array with the elements that are in a but not in b</span>","<span class=\"k\">function</span> diff<span class=\"k\">(</span> a<span class=\"k\">,</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i<span class=\"k\">,</span> j<span class=\"k\">,</span>","\t\tresult <span class=\"k\">=</span> a<span class=\"k\">.</span>slice<span class=\"k\">();</span>","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> result<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> b<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> result<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tresult<span class=\"k\">.</span>splice<span class=\"k\">(</span> i<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">);</span>","\t\t\t\ti<span class=\"k\">--;</span>","\t\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">return</span> result<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> extend<span class=\"k\">(</span> a<span class=\"k\">,</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> prop <span class=\"k\">in</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> b<span class=\"k\">[</span> prop <span class=\"k\">]</span> <span class=\"k\">===</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">delete</span> a<span class=\"k\">[</span> prop <span class=\"k\">];</span>","","\t\t<span class=\"c\">// Avoid \"Member not found\" error in IE8 caused by setting window.constructor</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> prop <span class=\"k\">!==</span> <span class=\"s\">\"constructor\"</span> <span class=\"k\">||</span> a <span class=\"k\">!==</span> window <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\ta<span class=\"k\">[</span> prop <span class=\"k\">]</span> <span class=\"k\">=</span> b<span class=\"k\">[</span> prop <span class=\"k\">];</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> a<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> addEvent<span class=\"k\">(</span> elem<span class=\"k\">,</span> type<span class=\"k\">,</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>addEventListener <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\telem<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span> type<span class=\"k\">,</span> fn<span class=\"k\">,</span> <span class=\"k\">false</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>attachEvent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\telem<span class=\"k\">.</span>attachEvent<span class=\"k\">(</span> <span class=\"s\">\"on\"</span> <span class=\"k\">+</span> type<span class=\"k\">,</span> fn <span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\tfn<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> id<span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">!!(</span> <span class=\"k\">typeof</span> document <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> document <span class=\"k\">&amp;&amp;</span> document<span class=\"k\">.</span>getElementById <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","\t\tdocument<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> name <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> registerLoggingCallback<span class=\"k\">(</span> key <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">[</span>key<span class=\"k\">].</span>push<span class=\"k\">(</span> callback <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">// Supports deprecated method of completely overwriting logging callbacks</span>","<span class=\"k\">function</span> runLoggingCallbacks<span class=\"k\">(</span> key<span class=\"k\">,</span> scope<span class=\"k\">,</span> args <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"c\">//debugger;</span>","\t<span class=\"k\">var</span> i<span class=\"k\">,</span> callbacks<span class=\"k\">;</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span> key <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">[</span> key <span class=\"k\">].</span>call<span class=\"k\">(</span>scope<span class=\"k\">,</span> args <span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\tcallbacks <span class=\"k\">=</span> config<span class=\"k\">[</span> key <span class=\"k\">];</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> callbacks<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcallbacks<span class=\"k\">[</span> i <span class=\"k\">].</span>call<span class=\"k\">(</span> scope<span class=\"k\">,</span> args <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">// Test for equality any JavaScript type.</span>","<span class=\"c\">// Author: Philippe Rath&#195;&#169; &lt;prathe@gmail.com&gt;</span>","QUnit<span class=\"k\">.</span>equiv <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","\t<span class=\"c\">// Call the o related callback with the given arguments.</span>","\t<span class=\"k\">function</span> bindCallbacks<span class=\"k\">(</span> o<span class=\"k\">,</span> callbacks<span class=\"k\">,</span> args <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> prop <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> o <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> prop <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> callbacks<span class=\"k\">[</span> prop <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> callbacks<span class=\"k\">[</span> prop <span class=\"k\">].</span>apply<span class=\"k\">(</span> callbacks<span class=\"k\">,</span> args <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> callbacks<span class=\"k\">[</span> prop <span class=\"k\">];</span> <span class=\"c\">// or undefined</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// the real equiv function</span>","\t<span class=\"k\">var</span> innerEquiv<span class=\"k\">,</span>","\t\t<span class=\"c\">// stack to decide between skip/abort functions</span>","\t\tcallers <span class=\"k\">=</span> <span class=\"k\">[],</span>","\t\t<span class=\"c\">// stack to avoiding loops from circular referencing</span>","\t\tparents <span class=\"k\">=</span> <span class=\"k\">[],</span>","","\t\tgetProto <span class=\"k\">=</span> Object<span class=\"k\">.</span>getPrototypeOf <span class=\"k\">||</span> <span class=\"k\">function</span> <span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> obj<span class=\"k\">.</span>__proto__<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tcallbacks <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","\t\t\t<span class=\"c\">// for string, boolean, number and null</span>","\t\t\t<span class=\"k\">function</span> useStrictEquality<span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> b <span class=\"k\">instanceof</span> a<span class=\"k\">.</span>constructor <span class=\"k\">||</span> a <span class=\"k\">instanceof</span> b<span class=\"k\">.</span>constructor <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"c\">// to catch short annotaion VS 'new' annotation of a</span>","\t\t\t\t\t<span class=\"c\">// declaration</span>","\t\t\t\t\t<span class=\"c\">// e.g. var i = 1;</span>","\t\t\t\t\t<span class=\"c\">// var j = new Number(1);</span>","\t\t\t\t\t<span class=\"k\">return</span> a <span class=\"k\">==</span> b<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> a <span class=\"k\">===</span> b<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">return</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"s\">\"string\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"boolean\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"number\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"null\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"nan\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> isNaN<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"date\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> b <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"date\"</span> <span class=\"k\">&amp;&amp;</span> a<span class=\"k\">.</span>valueOf<span class=\"k\">()</span> <span class=\"k\">===</span> b<span class=\"k\">.</span>valueOf<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"regexp\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> b <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"regexp\"</span> <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\t<span class=\"c\">// the regex itself</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>source <span class=\"k\">===</span> b<span class=\"k\">.</span>source <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\t<span class=\"c\">// and its modifers</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>global <span class=\"k\">===</span> b<span class=\"k\">.</span>global <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\t<span class=\"c\">// (gmi) ...</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>ignoreCase <span class=\"k\">===</span> b<span class=\"k\">.</span>ignoreCase <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>multiline <span class=\"k\">===</span> b<span class=\"k\">.</span>multiline<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"c\">// - skip when the property is a method of an instance (OOP)</span>","\t\t\t\t<span class=\"c\">// - abort otherwise,</span>","\t\t\t\t<span class=\"c\">// initial === would have catch identical references anyway</span>","\t\t\t\t<span class=\"s\">\"function\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> caller <span class=\"k\">=</span> callers<span class=\"k\">[</span>callers<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","\t\t\t\t\t<span class=\"k\">return</span> caller <span class=\"k\">!==</span> Object <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> caller <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"array\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span> j<span class=\"k\">,</span> len<span class=\"k\">,</span> loop<span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"c\">// b could be an object literal here</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> b <span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"array\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\tlen <span class=\"k\">=</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> len <span class=\"k\">!==</span> b<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"c\">// safe and faster</span>","\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\t<span class=\"c\">// track reference to avoid circular references</span>","\t\t\t\t\tparents<span class=\"k\">.</span>push<span class=\"k\">(</span> a <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tloop <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> parents<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> parents<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">===</span> a<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\tloop <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span><span class=\"c\">// dont rewalk array</span>","\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>loop <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>innerEquiv<span class=\"k\">(</span>a<span class=\"k\">[</span>i<span class=\"k\">],</span> b<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\tparents<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tparents<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"object\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span> j<span class=\"k\">,</span> loop<span class=\"k\">,</span>","\t\t\t\t\t\t<span class=\"c\">// Default to true</span>","\t\t\t\t\t\teq <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">,</span>","\t\t\t\t\t\taProperties <span class=\"k\">=</span> <span class=\"k\">[],</span>","\t\t\t\t\t\tbProperties <span class=\"k\">=</span> <span class=\"k\">[];</span>","","\t\t\t\t\t<span class=\"c\">// comparing constructors is more strict than using</span>","\t\t\t\t\t<span class=\"c\">// instanceof</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> a<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> b<span class=\"k\">.</span>constructor <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"c\">// Allow objects with no prototype to be equivalent to</span>","\t\t\t\t\t\t<span class=\"c\">// objects with Object as their constructor.</span>","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!((</span> getProto<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> getProto<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">===</span> Object<span class=\"k\">.</span>prototype <span class=\"k\">)</span> <span class=\"k\">||</span>","\t\t\t\t\t\t\t<span class=\"k\">(</span> getProto<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> getProto<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">===</span> Object<span class=\"k\">.</span>prototype <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\t<span class=\"c\">// stack constructor before traversing properties</span>","\t\t\t\t\tcallers<span class=\"k\">.</span>push<span class=\"k\">(</span> a<span class=\"k\">.</span>constructor <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"c\">// track reference to avoid circular references</span>","\t\t\t\t\tparents<span class=\"k\">.</span>push<span class=\"k\">(</span> a <span class=\"k\">);</span>","","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">in</span> a <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// be strict: don't ensures hasOwnProperty</span>","\t\t\t\t\t\t\t\t\t<span class=\"c\">// and go deep</span>","\t\t\t\t\t\tloop <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> parents<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> parents<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">===</span> a<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t<span class=\"c\">// don't go down the same path twice</span>","\t\t\t\t\t\t\t\tloop <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\taProperties<span class=\"k\">.</span>push<span class=\"k\">(</span>i<span class=\"k\">);</span> <span class=\"c\">// collect a's properties</span>","","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(!</span>loop <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>innerEquiv<span class=\"k\">(</span> a<span class=\"k\">[</span>i<span class=\"k\">],</span> b<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\teq <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\tcallers<span class=\"k\">.</span>pop<span class=\"k\">();</span> <span class=\"c\">// unstack, we are done</span>","\t\t\t\t\tparents<span class=\"k\">.</span>pop<span class=\"k\">();</span>","","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">in</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tbProperties<span class=\"k\">.</span>push<span class=\"k\">(</span> i <span class=\"k\">);</span> <span class=\"c\">// collect b's properties</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\t<span class=\"c\">// Ensures identical properties name</span>","\t\t\t\t\t<span class=\"k\">return</span> eq <span class=\"k\">&amp;&amp;</span> innerEquiv<span class=\"k\">(</span> aProperties<span class=\"k\">.</span>sort<span class=\"k\">(),</span> bProperties<span class=\"k\">.</span>sort<span class=\"k\">()</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">());</span>","","\tinnerEquiv <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"c\">// can take multiple arguments</span>","\t\t<span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[].</span>slice<span class=\"k\">.</span>apply<span class=\"k\">(</span> arguments <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> args<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// end transition</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span> a<span class=\"k\">,</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> a <span class=\"k\">===</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// catch the most you can</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> a <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> b <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> a <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span>","\t\t\t\t\t<span class=\"k\">typeof</span> b <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span>","\t\t\t\t\tQUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">!==</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// don't lose time with error prone cases</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> bindCallbacks<span class=\"k\">(</span>a<span class=\"k\">,</span> callbacks<span class=\"k\">,</span> <span class=\"k\">[</span> b<span class=\"k\">,</span> a <span class=\"k\">]);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"c\">// apply transition with (1..n) arguments</span>","\t\t<span class=\"k\">}</span><span class=\"k\">(</span> args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> args<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> arguments<span class=\"k\">.</span>callee<span class=\"k\">.</span>apply<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">,</span> args<span class=\"k\">.</span>splice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> args<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">))</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t<span class=\"k\">return</span> innerEquiv<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * jsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |</span>","<span class=\"c\"> * http://flesler.blogspot.com Licensed under BSD</span>","<span class=\"c\"> * (http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @projectDescription Advanced and extensible data dumping for Javascript.</span>","<span class=\"c\"> * @version 1.0.0</span>","<span class=\"c\"> * @author Ariel Flesler</span>","<span class=\"c\"> * @link {http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}</span>","<span class=\"c\"> */</span>","QUnit<span class=\"k\">.</span>jsDump <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">function</span> quote<span class=\"k\">(</span> str <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"s\">'\"'</span> <span class=\"k\">+</span> str<span class=\"k\">.</span>toString<span class=\"k\">().</span>replace<span class=\"k\">(</span> <span class=\"s\">/\"/g</span><span class=\"k\">,</span> <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">\"'</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'\"'</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">function</span> literal<span class=\"k\">(</span> o <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> o <span class=\"k\">+</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">function</span> join<span class=\"k\">(</span> pre<span class=\"k\">,</span> arr<span class=\"k\">,</span> post <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> s <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>separator<span class=\"k\">(),</span>","\t\t\tbase <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>indent<span class=\"k\">(),</span>","\t\t\tinner <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>indent<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arr<span class=\"k\">.</span>join <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tarr <span class=\"k\">=</span> arr<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">\",\"</span> <span class=\"k\">+</span> s <span class=\"k\">+</span> inner <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>arr <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> pre <span class=\"k\">+</span> post<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">[</span> pre<span class=\"k\">,</span> inner <span class=\"k\">+</span> arr<span class=\"k\">,</span> base <span class=\"k\">+</span> post <span class=\"k\">].</span>join<span class=\"k\">(</span>s<span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">function</span> array<span class=\"k\">(</span> arr<span class=\"k\">,</span> stack <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> i <span class=\"k\">=</span> arr<span class=\"k\">.</span>length<span class=\"k\">,</span> ret <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>i<span class=\"k\">);</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>up<span class=\"k\">();</span>","\t\t<span class=\"k\">while</span> <span class=\"k\">(</span> i<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tret<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span> arr<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">,</span> undefined <span class=\"k\">,</span> stack<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>down<span class=\"k\">();</span>","\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> <span class=\"s\">\"[\"</span><span class=\"k\">,</span> ret<span class=\"k\">,</span> <span class=\"s\">\"]\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">var</span> reName <span class=\"k\">=</span> <span class=\"s\">/^function (\\w+)/</span><span class=\"k\">,</span>","\t\tjsDump <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\tparse<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> obj<span class=\"k\">,</span> type<span class=\"k\">,</span> stack <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">//type is used mostly internally, you can fix a (custom)type in advance</span>","\t\t\t\tstack <span class=\"k\">=</span> stack <span class=\"k\">||</span> <span class=\"k\">[</span> <span class=\"k\">];</span>","\t\t\t\t<span class=\"k\">var</span> inStack<span class=\"k\">,</span> res<span class=\"k\">,</span>","\t\t\t\t\tparser <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">[</span> type <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>typeOf<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">];</span>","","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"k\">typeof</span> parser<span class=\"k\">;</span>","\t\t\t\tinStack <span class=\"k\">=</span> inArray<span class=\"k\">(</span> obj<span class=\"k\">,</span> stack <span class=\"k\">);</span>","","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> inStack <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"recursion(\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>inStack <span class=\"k\">-</span> stack<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"c\">//else</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">\"function\"</span> <span class=\"k\">)</span>  <span class=\"k\">{</span>","\t\t\t\t\tstack<span class=\"k\">.</span>push<span class=\"k\">(</span> obj <span class=\"k\">);</span>","\t\t\t\t\tres <span class=\"k\">=</span> parser<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">,</span> stack <span class=\"k\">);</span>","\t\t\t\t\tstack<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">return</span> res<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"c\">// else</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">\"string\"</span> <span class=\"k\">)</span> <span class=\"k\">?</span> parser <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">.</span>error<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\ttypeOf<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> type<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> obj <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"null\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"RegExp\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"regexp\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"Date\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"date\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"Function\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"function\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>setInterval <span class=\"k\">!==</span> undefined <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>document <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"window\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">9</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"document\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>nodeType <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"node\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>","\t\t\t\t\t<span class=\"c\">// native arrays</span>","\t\t\t\t\ttoString<span class=\"k\">.</span>call<span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"[object Array]\"</span> <span class=\"k\">||</span>","\t\t\t\t\t<span class=\"c\">// NodeList objects</span>","\t\t\t\t\t<span class=\"k\">(</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">\"number\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>item <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>length <span class=\"k\">?</span> obj<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">===</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>item<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"array\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"k\">typeof</span> obj<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">return</span> type<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tseparator<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>multiline <span class=\"k\">?</span>\t<span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&lt;br /&gt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;nbsp;\"</span> <span class=\"k\">:</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tindent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> extra <span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"c\">// extra can be a number, shortcut for increasing-calling-decreasing</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>multiline <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">var</span> chr <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indentChar<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tchr <span class=\"k\">=</span> chr<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/\\t/g</span><span class=\"k\">,</span> <span class=\"s\">\"   \"</span> <span class=\"k\">).</span>replace<span class=\"k\">(</span> <span class=\"s\">/ /g</span><span class=\"k\">,</span> <span class=\"s\">\"&amp;nbsp;\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">+</span> <span class=\"k\">(</span>extra<span class=\"k\">||</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">).</span>join<span class=\"k\">(</span>chr<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">+=</span> a <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tdown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">-=</span> a <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tsetParser<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> name<span class=\"k\">,</span> parser <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> parser<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t<span class=\"c\">// The next 3 are exposed so you can use them</span>","\t\t\tquote<span class=\"k\">:</span> quote<span class=\"k\">,</span>","\t\t\tliteral<span class=\"k\">:</span> literal<span class=\"k\">,</span>","\t\t\tjoin<span class=\"k\">:</span> join<span class=\"k\">,</span>","\t\t\t<span class=\"c\">//</span>","\t\t\t_depth_<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","\t\t\t<span class=\"c\">// This is the list of parsers, to modify them, use jsDump.setParser</span>","\t\t\tparsers<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\twindow<span class=\"k\">:</span> <span class=\"s\">\"[Window]\"</span><span class=\"k\">,</span>","\t\t\t\tdocument<span class=\"k\">:</span> <span class=\"s\">\"[Document]\"</span><span class=\"k\">,</span>","\t\t\t\terror<span class=\"k\">:</span> <span class=\"s\">\"[ERROR]\"</span><span class=\"k\">,</span> <span class=\"c\">//when no parser is found, shouldn\"t happen</span>","\t\t\t\tunknown<span class=\"k\">:</span> <span class=\"s\">\"[Unknown]\"</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"s\">\"null\"</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"function\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"s\">\"function\"</span><span class=\"k\">,</span>","\t\t\t\t\t\tname <span class=\"k\">=</span> <span class=\"s\">\"name\"</span> <span class=\"k\">in</span> fn <span class=\"k\">?</span> fn<span class=\"k\">.</span>name <span class=\"k\">:</span> <span class=\"k\">(</span>reName<span class=\"k\">.</span>exec<span class=\"k\">(</span>fn<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">[])[</span><span class=\"s\">1</span><span class=\"k\">];</span><span class=\"c\">//functions never have name in IE</span>","","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">\"( \"</span><span class=\"k\">;</span>","","\t\t\t\t\tret <span class=\"k\">=</span> <span class=\"k\">[</span> ret<span class=\"k\">,</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span> fn<span class=\"k\">,</span> <span class=\"s\">\"functionArgs\"</span> <span class=\"k\">),</span> <span class=\"s\">\"){\"</span> <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> ret<span class=\"k\">,</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span>fn<span class=\"k\">,</span><span class=\"s\">\"functionCode\"</span> <span class=\"k\">),</span> <span class=\"s\">\"}\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\tarray<span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\t\tnodelist<span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"arguments\"</span><span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\t\tobject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> map<span class=\"k\">,</span> stack <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"k\">[</span> <span class=\"k\">],</span> keys<span class=\"k\">,</span> key<span class=\"k\">,</span> val<span class=\"k\">,</span> i<span class=\"k\">;</span>","\t\t\t\t\tQUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>up<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> Object<span class=\"k\">.</span>keys <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tkeys <span class=\"k\">=</span> Object<span class=\"k\">.</span>keys<span class=\"k\">(</span> map <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t\tkeys <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> key <span class=\"k\">in</span> map <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\tkeys<span class=\"k\">.</span>push<span class=\"k\">(</span> key <span class=\"k\">);</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tkeys<span class=\"k\">.</span>sort<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tkey <span class=\"k\">=</span> keys<span class=\"k\">[</span> i <span class=\"k\">];</span>","\t\t\t\t\t\tval <span class=\"k\">=</span> map<span class=\"k\">[</span> key <span class=\"k\">];</span>","\t\t\t\t\t\tret<span class=\"k\">.</span>push<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span> key<span class=\"k\">,</span> <span class=\"s\">\"key\"</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span> val<span class=\"k\">,</span> undefined<span class=\"k\">,</span> stack <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tQUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>down<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> <span class=\"s\">\"{\"</span><span class=\"k\">,</span> ret<span class=\"k\">,</span> <span class=\"s\">\"}\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\tnode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> a<span class=\"k\">,</span> val<span class=\"k\">,</span>","\t\t\t\t\t\topen <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;lt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"&lt;\"</span><span class=\"k\">,</span>","\t\t\t\t\t\tclose <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;gt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">,</span>","\t\t\t\t\t\ttag <span class=\"k\">=</span> node<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","\t\t\t\t\t\tret <span class=\"k\">=</span> open <span class=\"k\">+</span> tag<span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> a <span class=\"k\">in</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>DOMAttrs <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tval <span class=\"k\">=</span> node<span class=\"k\">[</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>DOMAttrs<span class=\"k\">[</span>a<span class=\"k\">]</span> <span class=\"k\">];</span>","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> val <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> a <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span> val<span class=\"k\">,</span> <span class=\"s\">\"attribute\"</span> <span class=\"k\">);</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">return</span> ret <span class=\"k\">+</span> close <span class=\"k\">+</span> open <span class=\"k\">+</span> <span class=\"s\">\"/\"</span> <span class=\"k\">+</span> tag <span class=\"k\">+</span> close<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\tfunctionArgs<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"c\">//function calls it internally, it's the arguments part of the function</span>","\t\t\t\t\t<span class=\"k\">var</span> args<span class=\"k\">,</span>","\t\t\t\t\t\tl <span class=\"k\">=</span> fn<span class=\"k\">.</span>length<span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>l <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\targs <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>l<span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">while</span> <span class=\"k\">(</span> l<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\targs<span class=\"k\">[</span>l<span class=\"k\">]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span><span class=\"s\">97</span><span class=\"k\">+</span>l<span class=\"k\">);</span><span class=\"c\">//97 is 'a'</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> args<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">\", \"</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\tkey<span class=\"k\">:</span> quote<span class=\"k\">,</span> <span class=\"c\">//object calls it internally, the key part of an item in a map</span>","\t\t\t\tfunctionCode<span class=\"k\">:</span> <span class=\"s\">\"[code]\"</span><span class=\"k\">,</span> <span class=\"c\">//function calls it internally, it's the content of the function</span>","\t\t\t\tattribute<span class=\"k\">:</span> quote<span class=\"k\">,</span> <span class=\"c\">//node calls it internally, it's an html attribute value</span>","\t\t\t\tstring<span class=\"k\">:</span> quote<span class=\"k\">,</span>","\t\t\t\tdate<span class=\"k\">:</span> quote<span class=\"k\">,</span>","\t\t\t\tregexp<span class=\"k\">:</span> literal<span class=\"k\">,</span> <span class=\"c\">//regex</span>","\t\t\t\tnumber<span class=\"k\">:</span> literal<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"boolean\"</span><span class=\"k\">:</span> literal","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tDOMAttrs<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">//attributes to dump from nodes, name=&gt;realName</span>","\t\t\t\tid<span class=\"k\">:</span> <span class=\"s\">\"id\"</span><span class=\"k\">,</span>","\t\t\t\tname<span class=\"k\">:</span> <span class=\"s\">\"name\"</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"class\"</span><span class=\"k\">:</span> <span class=\"s\">\"className\"</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tHTML<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span><span class=\"c\">//if true, entities are escaped ( &lt;, &gt;, \\t, space and \\n )</span>","\t\t\tindentChar<span class=\"k\">:</span> <span class=\"s\">\"  \"</span><span class=\"k\">,</span><span class=\"c\">//indentation unit</span>","\t\t\tmultiline<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"c\">//if true, items in a collection, are separated by a \\n, else just a space.</span>","\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t<span class=\"k\">return</span> jsDump<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">// from Sizzle.js</span>","<span class=\"k\">function</span> getText<span class=\"k\">(</span> elems <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i<span class=\"k\">,</span> elem<span class=\"k\">,</span>","\t\tret <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> elems<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\telem <span class=\"k\">=</span> elems<span class=\"k\">[</span>i<span class=\"k\">];</span>","","\t\t<span class=\"c\">// Get the text from text nodes and CDATA nodes</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">3</span> <span class=\"k\">||</span> elem<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">4</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tret <span class=\"k\">+=</span> elem<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","","\t\t<span class=\"c\">// Traverse everything else, except comment nodes</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>nodeType <span class=\"k\">!==</span> <span class=\"s\">8</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tret <span class=\"k\">+=</span> getText<span class=\"k\">(</span> elem<span class=\"k\">.</span>childNodes <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> ret<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">// from jquery.js</span>","<span class=\"k\">function</span> inArray<span class=\"k\">(</span> elem<span class=\"k\">,</span> array <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> array<span class=\"k\">.</span>indexOf <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> array<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> elem <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">=</span> array<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> array<span class=\"k\">[</span> i <span class=\"k\">]</span> <span class=\"k\">===</span> elem <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> i<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\"> * Javascript Diff Algorithm</span>","<span class=\"c\"> *  By John Resig (http://ejohn.org/)</span>","<span class=\"c\"> *  Modified by Chu Alan \"sprite\"</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Released under the MIT license.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * More Info:</span>","<span class=\"c\"> *  http://ejohn.org/projects/javascript-diff-algorithm/</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Usage: QUnit.diff(expected, actual)</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * QUnit.diff( \"the quick brown fox jumped over\", \"the quick fox jumps over\" ) == \"the  quick &lt;del&gt;brown &lt;/del&gt; fox &lt;del&gt;jumped &lt;/del&gt;&lt;ins&gt;jumps &lt;/ins&gt; over\"</span>","<span class=\"c\"> */</span>","QUnit<span class=\"k\">.</span>diff <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">function</span> diff<span class=\"k\">(</span> o<span class=\"k\">,</span> n <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span>","\t\t\tns <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\tos <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> n<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> ns<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tns<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\trows<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t\t\t\t\to<span class=\"k\">:</span> <span class=\"k\">null</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tns<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">].</span>rows<span class=\"k\">.</span>push<span class=\"k\">(</span> i <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> o<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> os<span class=\"k\">[</span> o<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tos<span class=\"k\">[</span> o<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\trows<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t\t\t\t\tn<span class=\"k\">:</span> <span class=\"k\">null</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tos<span class=\"k\">[</span> o<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">].</span>rows<span class=\"k\">.</span>push<span class=\"k\">(</span> i <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">in</span> ns <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> ns<span class=\"k\">,</span> i <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">continue</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> ns<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> os<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">!=</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> os<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tn<span class=\"k\">[</span> ns<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> n<span class=\"k\">[</span> ns<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> os<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\to<span class=\"k\">[</span> os<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> o<span class=\"k\">[</span> os<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> ns<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> n<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>text <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> n<span class=\"k\">[</span> i <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">&lt;</span> o<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\tn<span class=\"k\">[</span> i <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">==</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","\t\t\t\tn<span class=\"k\">[</span> i <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> n<span class=\"k\">[</span> i <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\to<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> i <span class=\"k\">+</span> <span class=\"s\">1</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> n<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>text <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> n<span class=\"k\">[</span> i <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\tn<span class=\"k\">[</span> i <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">==</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">])</span> <span class=\"k\">{</span>","","\t\t\t\tn<span class=\"k\">[</span> i <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> n<span class=\"k\">[</span> i <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\to<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> i <span class=\"k\">-</span> <span class=\"s\">1</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">return</span> <span class=\"k\">{</span>","\t\t\to<span class=\"k\">:</span> o<span class=\"k\">,</span>","\t\t\tn<span class=\"k\">:</span> n","\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span> o<span class=\"k\">,</span> n <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\to <span class=\"k\">=</span> o<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/\\s+$/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","\t\tn <span class=\"k\">=</span> n<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/\\s+$/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span> pre<span class=\"k\">,</span>","\t\t\tstr <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","\t\t\tout <span class=\"k\">=</span> diff<span class=\"k\">(</span> o <span class=\"k\">===</span> <span class=\"s\">\"\"</span> <span class=\"k\">?</span> <span class=\"k\">[]</span> <span class=\"k\">:</span> o<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s+/</span><span class=\"k\">),</span> n <span class=\"k\">===</span> <span class=\"s\">\"\"</span> <span class=\"k\">?</span> <span class=\"k\">[]</span> <span class=\"k\">:</span> n<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s+/</span><span class=\"k\">)</span> <span class=\"k\">),</span>","\t\t\toSpace <span class=\"k\">=</span> o<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/\\s+/g</span><span class=\"k\">),</span>","\t\t\tnSpace <span class=\"k\">=</span> n<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/\\s+/g</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> oSpace <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\toSpace <span class=\"k\">=</span> <span class=\"k\">[</span> <span class=\"s\">\" \"</span> <span class=\"k\">];</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\toSpace<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"s\">\" \"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> nSpace <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tnSpace <span class=\"k\">=</span> <span class=\"k\">[</span> <span class=\"s\">\" \"</span> <span class=\"k\">];</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tnSpace<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"s\">\" \"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> out<span class=\"k\">.</span>n<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> out<span class=\"k\">.</span>o<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tstr <span class=\"k\">+=</span> <span class=\"s\">\"&lt;del&gt;\"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> oSpace<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/del&gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> out<span class=\"k\">.</span>n<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> n <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> n <span class=\"k\">&lt;</span> out<span class=\"k\">.</span>o<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>n<span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">;</span> n<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tstr <span class=\"k\">+=</span> <span class=\"s\">\"&lt;del&gt;\"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">+</span> oSpace<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/del&gt;\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> out<span class=\"k\">.</span>n<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>out<span class=\"k\">.</span>n<span class=\"k\">[</span>i<span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tstr <span class=\"k\">+=</span> <span class=\"s\">\"&lt;ins&gt;\"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>n<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> nSpace<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/ins&gt;\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"c\">// `pre` initialized at top of scope</span>","\t\t\t\t\tpre <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> n <span class=\"k\">=</span> out<span class=\"k\">.</span>n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span> n <span class=\"k\">&lt;</span> out<span class=\"k\">.</span>o<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>n<span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">;</span> n<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tpre <span class=\"k\">+=</span> <span class=\"s\">\"&lt;del&gt;\"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">+</span> oSpace<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/del&gt;\"</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tstr <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>n<span class=\"k\">[</span>i<span class=\"k\">].</span>text <span class=\"k\">+</span> nSpace<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> pre<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">return</span> str<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">// for CommonJS enviroments, export everything</span>","<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> exports <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\textend<span class=\"k\">(</span>exports<span class=\"k\">,</span> QUnit<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">// get at whatever the global object is, like window in browsers</span>","<span class=\"k\">}</span><span class=\"k\">(</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">.</span>call<span class=\"k\">())</span> <span class=\"k\">));</span>"];
_$jscoverage['qunit/qunit.js'][11]++;
(function (window) {
  _$jscoverage['qunit/qunit.js'][13]++;
  var QUnit, config, testId = 0, toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, defined = {setTimeout: ((typeof window.setTimeout) !== "undefined"), sessionStorage: (function () {
  _$jscoverage['qunit/qunit.js'][21]++;
  var x = "qunit-test-string";
  _$jscoverage['qunit/qunit.js'][22]++;
  try {
    _$jscoverage['qunit/qunit.js'][23]++;
    sessionStorage.setItem(x, x);
    _$jscoverage['qunit/qunit.js'][24]++;
    sessionStorage.removeItem(x);
    _$jscoverage['qunit/qunit.js'][25]++;
    return true;
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][27]++;
    return false;
  }
})()};
  _$jscoverage['qunit/qunit.js'][32]++;
  function Test(name, testName, expected, async, callback) {
    _$jscoverage['qunit/qunit.js'][33]++;
    this.name = name;
    _$jscoverage['qunit/qunit.js'][34]++;
    this.testName = testName;
    _$jscoverage['qunit/qunit.js'][35]++;
    this.expected = expected;
    _$jscoverage['qunit/qunit.js'][36]++;
    this.async = async;
    _$jscoverage['qunit/qunit.js'][37]++;
    this.callback = callback;
    _$jscoverage['qunit/qunit.js'][38]++;
    this.assertions = [];
}
  _$jscoverage['qunit/qunit.js'][41]++;
  Test.prototype = {init: (function () {
  _$jscoverage['qunit/qunit.js'][43]++;
  var b, li, tests = id("qunit-tests");
  _$jscoverage['qunit/qunit.js'][46]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][47]++;
    b = document.createElement("strong");
    _$jscoverage['qunit/qunit.js'][48]++;
    b.innerHTML = ("Running " + this.name);
    _$jscoverage['qunit/qunit.js'][50]++;
    li = document.createElement("li");
    _$jscoverage['qunit/qunit.js'][51]++;
    li.appendChild(b);
    _$jscoverage['qunit/qunit.js'][52]++;
    li.className = "running";
    _$jscoverage['qunit/qunit.js'][53]++;
    li.id = (this.id = ("qunit-test-output" + (testId++)));
    _$jscoverage['qunit/qunit.js'][55]++;
    tests.appendChild(li);
  }
}), setup: (function () {
  _$jscoverage['qunit/qunit.js'][59]++;
  if ((this.module !== config.previousModule)) {
    _$jscoverage['qunit/qunit.js'][60]++;
    if (config.previousModule) {
      _$jscoverage['qunit/qunit.js'][61]++;
      runLoggingCallbacks("moduleDone", QUnit, {name: config.previousModule, failed: config.moduleStats.bad, passed: (config.moduleStats.all - config.moduleStats.bad), total: config.moduleStats.all});
    }
    _$jscoverage['qunit/qunit.js'][68]++;
    config.previousModule = this.module;
    _$jscoverage['qunit/qunit.js'][69]++;
    config.moduleStats = {all: 0, bad: 0};
    _$jscoverage['qunit/qunit.js'][70]++;
    runLoggingCallbacks("moduleStart", QUnit, {name: this.module});
  }
  else {
    _$jscoverage['qunit/qunit.js'][73]++;
    if (config.autorun) {
      _$jscoverage['qunit/qunit.js'][74]++;
      runLoggingCallbacks("moduleStart", QUnit, {name: this.module});
    }
  }
  _$jscoverage['qunit/qunit.js'][79]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][81]++;
  this.testEnvironment = extend({setup: (function () {
}), teardown: (function () {
})}, this.moduleTestEnvironment);
  _$jscoverage['qunit/qunit.js'][86]++;
  runLoggingCallbacks("testStart", QUnit, {name: this.testName, module: this.module});
  _$jscoverage['qunit/qunit.js'][93]++;
  QUnit.current_testEnvironment = this.testEnvironment;
  _$jscoverage['qunit/qunit.js'][95]++;
  if ((! config.pollution)) {
    _$jscoverage['qunit/qunit.js'][96]++;
    saveGlobal();
  }
  _$jscoverage['qunit/qunit.js'][98]++;
  if (config.notrycatch) {
    _$jscoverage['qunit/qunit.js'][99]++;
    this.testEnvironment.setup.call(this.testEnvironment);
    _$jscoverage['qunit/qunit.js'][100]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][102]++;
  try {
    _$jscoverage['qunit/qunit.js'][103]++;
    this.testEnvironment.setup.call(this.testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][105]++;
    QUnit.pushFailure(("Setup failed on " + this.testName + ": " + e.message), extractStacktrace(e, 1));
  }
}), run: (function () {
  _$jscoverage['qunit/qunit.js'][109]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][111]++;
  var running = id("qunit-testresult");
  _$jscoverage['qunit/qunit.js'][113]++;
  if (running) {
    _$jscoverage['qunit/qunit.js'][114]++;
    running.innerHTML = ("Running: <br/>" + this.name);
  }
  _$jscoverage['qunit/qunit.js'][117]++;
  if (this.async) {
    _$jscoverage['qunit/qunit.js'][118]++;
    QUnit.stop();
  }
  _$jscoverage['qunit/qunit.js'][121]++;
  if (config.notrycatch) {
    _$jscoverage['qunit/qunit.js'][122]++;
    this.callback.call(this.testEnvironment);
    _$jscoverage['qunit/qunit.js'][123]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][126]++;
  try {
    _$jscoverage['qunit/qunit.js'][127]++;
    this.callback.call(this.testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][129]++;
    QUnit.pushFailure(("Died on test #" + (this.assertions.length + 1) + ": " + e.message), extractStacktrace(e, 1));
    _$jscoverage['qunit/qunit.js'][131]++;
    saveGlobal();
    _$jscoverage['qunit/qunit.js'][134]++;
    if (config.blocking) {
      _$jscoverage['qunit/qunit.js'][135]++;
      QUnit.start();
    }
  }
}), teardown: (function () {
  _$jscoverage['qunit/qunit.js'][140]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][141]++;
  if (config.notrycatch) {
    _$jscoverage['qunit/qunit.js'][142]++;
    this.testEnvironment.teardown.call(this.testEnvironment);
    _$jscoverage['qunit/qunit.js'][143]++;
    return;
  }
  else {
    _$jscoverage['qunit/qunit.js'][145]++;
    try {
      _$jscoverage['qunit/qunit.js'][146]++;
      this.testEnvironment.teardown.call(this.testEnvironment);
    }
    catch (e) {
      _$jscoverage['qunit/qunit.js'][148]++;
      QUnit.pushFailure(("Teardown failed on " + this.testName + ": " + e.message), extractStacktrace(e, 1));
    }
  }
  _$jscoverage['qunit/qunit.js'][151]++;
  checkPollution();
}), finish: (function () {
  _$jscoverage['qunit/qunit.js'][154]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][155]++;
  if (((this.expected != null) && (this.expected != this.assertions.length))) {
    _$jscoverage['qunit/qunit.js'][156]++;
    QUnit.pushFailure(("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run"), this.stack);
  }
  else {
    _$jscoverage['qunit/qunit.js'][157]++;
    if (((this.expected == null) && (! this.assertions.length))) {
      _$jscoverage['qunit/qunit.js'][158]++;
      QUnit.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
    }
  }
  _$jscoverage['qunit/qunit.js'][161]++;
  var assertion, a, b, i, li, ol, good = 0, bad = 0, tests = id("qunit-tests");
  _$jscoverage['qunit/qunit.js'][166]++;
  config.stats.all += this.assertions.length;
  _$jscoverage['qunit/qunit.js'][167]++;
  config.moduleStats.all += this.assertions.length;
  _$jscoverage['qunit/qunit.js'][169]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][170]++;
    ol = document.createElement("ol");
    _$jscoverage['qunit/qunit.js'][172]++;
    for (i = 0; (i < this.assertions.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][173]++;
      assertion = this.assertions[i];
      _$jscoverage['qunit/qunit.js'][175]++;
      li = document.createElement("li");
      _$jscoverage['qunit/qunit.js'][176]++;
      li.className = (assertion.result? "pass": "fail");
      _$jscoverage['qunit/qunit.js'][177]++;
      li.innerHTML = (assertion.message || (assertion.result? "okay": "failed"));
      _$jscoverage['qunit/qunit.js'][178]++;
      ol.appendChild(li);
      _$jscoverage['qunit/qunit.js'][180]++;
      if (assertion.result) {
        _$jscoverage['qunit/qunit.js'][181]++;
        (good++);
      }
      else {
        _$jscoverage['qunit/qunit.js'][183]++;
        (bad++);
        _$jscoverage['qunit/qunit.js'][184]++;
        (config.stats.bad++);
        _$jscoverage['qunit/qunit.js'][185]++;
        (config.moduleStats.bad++);
      }
}
    _$jscoverage['qunit/qunit.js'][190]++;
    if ((QUnit.config.reorder && defined.sessionStorage)) {
      _$jscoverage['qunit/qunit.js'][191]++;
      if (bad) {
        _$jscoverage['qunit/qunit.js'][192]++;
        sessionStorage.setItem(("qunit-test-" + this.module + "-" + this.testName), bad);
      }
      else {
        _$jscoverage['qunit/qunit.js'][194]++;
        sessionStorage.removeItem(("qunit-test-" + this.module + "-" + this.testName));
      }
    }
    _$jscoverage['qunit/qunit.js'][198]++;
    if ((bad === 0)) {
      _$jscoverage['qunit/qunit.js'][199]++;
      ol.style.display = "none";
    }
    _$jscoverage['qunit/qunit.js'][203]++;
    b = document.createElement("strong");
    _$jscoverage['qunit/qunit.js'][204]++;
    b.innerHTML = (this.name + " <b class='counts'>(<b class='failed'>" + bad + "</b>, <b class='passed'>" + good + "</b>, " + this.assertions.length + ")</b>");
    _$jscoverage['qunit/qunit.js'][207]++;
    a = document.createElement("a");
    _$jscoverage['qunit/qunit.js'][208]++;
    a.innerHTML = "Rerun";
    _$jscoverage['qunit/qunit.js'][209]++;
    a.href = QUnit.url({filter: getText([b]).replace(/\([^)]+\)$/, "").replace(/(^\s*|\s*$)/g, "")});
    _$jscoverage['qunit/qunit.js'][211]++;
    addEvent(b, "click", (function () {
  _$jscoverage['qunit/qunit.js'][212]++;
  var next = b.nextSibling.nextSibling, display = next.style.display;
  _$jscoverage['qunit/qunit.js'][214]++;
  next.style.display = ((display === "none")? "block": "none");
}));
    _$jscoverage['qunit/qunit.js'][217]++;
    addEvent(b, "dblclick", (function (e) {
  _$jscoverage['qunit/qunit.js'][218]++;
  var target = ((e && e.target)? e.target: window.event.srcElement);
  _$jscoverage['qunit/qunit.js'][219]++;
  if (((target.nodeName.toLowerCase() == "span") || (target.nodeName.toLowerCase() == "b"))) {
    _$jscoverage['qunit/qunit.js'][220]++;
    target = target.parentNode;
  }
  _$jscoverage['qunit/qunit.js'][222]++;
  if ((window.location && (target.nodeName.toLowerCase() === "strong"))) {
    _$jscoverage['qunit/qunit.js'][223]++;
    window.location = QUnit.url({filter: getText([target]).replace(/\([^)]+\)$/, "").replace(/(^\s*|\s*$)/g, "")});
  }
}));
    _$jscoverage['qunit/qunit.js'][230]++;
    li = id(this.id);
    _$jscoverage['qunit/qunit.js'][231]++;
    li.className = (bad? "fail": "pass");
    _$jscoverage['qunit/qunit.js'][232]++;
    li.removeChild(li.firstChild);
    _$jscoverage['qunit/qunit.js'][233]++;
    li.appendChild(b);
    _$jscoverage['qunit/qunit.js'][234]++;
    li.appendChild(a);
    _$jscoverage['qunit/qunit.js'][235]++;
    li.appendChild(ol);
  }
  else {
    _$jscoverage['qunit/qunit.js'][238]++;
    for (i = 0; (i < this.assertions.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][239]++;
      if ((! this.assertions[i].result)) {
        _$jscoverage['qunit/qunit.js'][240]++;
        (bad++);
        _$jscoverage['qunit/qunit.js'][241]++;
        (config.stats.bad++);
        _$jscoverage['qunit/qunit.js'][242]++;
        (config.moduleStats.bad++);
      }
}
  }
  _$jscoverage['qunit/qunit.js'][247]++;
  runLoggingCallbacks("testDone", QUnit, {name: this.testName, module: this.module, failed: bad, passed: (this.assertions.length - bad), total: this.assertions.length});
  _$jscoverage['qunit/qunit.js'][255]++;
  QUnit.reset();
}), queue: (function () {
  _$jscoverage['qunit/qunit.js'][259]++;
  var bad, test = this;
  _$jscoverage['qunit/qunit.js'][262]++;
  synchronize((function () {
  _$jscoverage['qunit/qunit.js'][263]++;
  test.init();
}));
  _$jscoverage['qunit/qunit.js'][265]++;
  function run() {
    _$jscoverage['qunit/qunit.js'][267]++;
    synchronize((function () {
  _$jscoverage['qunit/qunit.js'][268]++;
  test.setup();
}));
    _$jscoverage['qunit/qunit.js'][270]++;
    synchronize((function () {
  _$jscoverage['qunit/qunit.js'][271]++;
  test.run();
}));
    _$jscoverage['qunit/qunit.js'][273]++;
    synchronize((function () {
  _$jscoverage['qunit/qunit.js'][274]++;
  test.teardown();
}));
    _$jscoverage['qunit/qunit.js'][276]++;
    synchronize((function () {
  _$jscoverage['qunit/qunit.js'][277]++;
  test.finish();
}));
}
  _$jscoverage['qunit/qunit.js'][283]++;
  bad = (QUnit.config.reorder && defined.sessionStorage && (+ sessionStorage.getItem(("qunit-test-" + this.module + "-" + this.testName))));
  _$jscoverage['qunit/qunit.js'][286]++;
  if (bad) {
    _$jscoverage['qunit/qunit.js'][287]++;
    run();
  }
  else {
    _$jscoverage['qunit/qunit.js'][289]++;
    synchronize(run, true);
  }
})};
  _$jscoverage['qunit/qunit.js'][295]++;
  QUnit = {module: (function (name, testEnvironment) {
  _$jscoverage['qunit/qunit.js'][299]++;
  config.currentModule = name;
  _$jscoverage['qunit/qunit.js'][300]++;
  config.currentModuleTestEnviroment = testEnvironment;
}), asyncTest: (function (testName, expected, callback) {
  _$jscoverage['qunit/qunit.js'][304]++;
  if ((arguments.length === 2)) {
    _$jscoverage['qunit/qunit.js'][305]++;
    callback = expected;
    _$jscoverage['qunit/qunit.js'][306]++;
    expected = null;
  }
  _$jscoverage['qunit/qunit.js'][309]++;
  QUnit.test(testName, expected, callback, true);
}), test: (function (testName, expected, callback, async) {
  _$jscoverage['qunit/qunit.js'][313]++;
  var test, name = ("<span class='test-name'>" + escapeInnerText(testName) + "</span>");
  _$jscoverage['qunit/qunit.js'][316]++;
  if ((arguments.length === 2)) {
    _$jscoverage['qunit/qunit.js'][317]++;
    callback = expected;
    _$jscoverage['qunit/qunit.js'][318]++;
    expected = null;
  }
  _$jscoverage['qunit/qunit.js'][321]++;
  if (config.currentModule) {
    _$jscoverage['qunit/qunit.js'][322]++;
    name = ("<span class='module-name'>" + config.currentModule + "</span>: " + name);
  }
  _$jscoverage['qunit/qunit.js'][325]++;
  if ((! validTest((config.currentModule + ": " + testName)))) {
    _$jscoverage['qunit/qunit.js'][326]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][329]++;
  test = new Test(name, testName, expected, async, callback);
  _$jscoverage['qunit/qunit.js'][330]++;
  test.module = config.currentModule;
  _$jscoverage['qunit/qunit.js'][331]++;
  test.moduleTestEnvironment = config.currentModuleTestEnviroment;
  _$jscoverage['qunit/qunit.js'][332]++;
  test.stack = sourceFromStacktrace(2);
  _$jscoverage['qunit/qunit.js'][333]++;
  test.queue();
}), expect: (function (asserts) {
  _$jscoverage['qunit/qunit.js'][338]++;
  config.current.expected = asserts;
}), ok: (function (result, msg) {
  _$jscoverage['qunit/qunit.js'][344]++;
  if ((! config.current)) {
    _$jscoverage['qunit/qunit.js'][345]++;
    throw new Error(("ok() assertion outside test context, was " + sourceFromStacktrace(2)));
  }
  _$jscoverage['qunit/qunit.js'][347]++;
  result = (! (! result));
  _$jscoverage['qunit/qunit.js'][349]++;
  var source, details = {result: result, message: msg};
  _$jscoverage['qunit/qunit.js'][355]++;
  msg = escapeInnerText((msg || (result? "okay": "failed")));
  _$jscoverage['qunit/qunit.js'][356]++;
  msg = ("<span class='test-message'>" + msg + "</span>");
  _$jscoverage['qunit/qunit.js'][358]++;
  if ((! result)) {
    _$jscoverage['qunit/qunit.js'][359]++;
    source = sourceFromStacktrace(2);
    _$jscoverage['qunit/qunit.js'][360]++;
    if (source) {
      _$jscoverage['qunit/qunit.js'][361]++;
      details.source = source;
      _$jscoverage['qunit/qunit.js'][362]++;
      msg += ("<table><tr class='test-source'><th>Source: </th><td><pre>" + escapeInnerText(source) + "</pre></td></tr></table>");
    }
  }
  _$jscoverage['qunit/qunit.js'][365]++;
  runLoggingCallbacks("log", QUnit, details);
  _$jscoverage['qunit/qunit.js'][366]++;
  config.current.assertions.push({result: result, message: msg});
}), equal: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][375]++;
  QUnit.push((expected == actual), actual, expected, message);
}), notEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][379]++;
  QUnit.push((expected != actual), actual, expected, message);
}), deepEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][383]++;
  QUnit.push(QUnit.equiv(actual, expected), actual, expected, message);
}), notDeepEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][387]++;
  QUnit.push((! QUnit.equiv(actual, expected)), actual, expected, message);
}), strictEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][391]++;
  QUnit.push((expected === actual), actual, expected, message);
}), notStrictEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][395]++;
  QUnit.push((expected !== actual), actual, expected, message);
}), raises: (function (block, expected, message) {
  _$jscoverage['qunit/qunit.js'][399]++;
  var actual, ok = false;
  _$jscoverage['qunit/qunit.js'][402]++;
  if (((typeof expected) === "string")) {
    _$jscoverage['qunit/qunit.js'][403]++;
    message = expected;
    _$jscoverage['qunit/qunit.js'][404]++;
    expected = null;
  }
  _$jscoverage['qunit/qunit.js'][407]++;
  try {
    _$jscoverage['qunit/qunit.js'][408]++;
    block.call(config.current.testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][410]++;
    actual = e;
  }
  _$jscoverage['qunit/qunit.js'][413]++;
  if (actual) {
    _$jscoverage['qunit/qunit.js'][415]++;
    if ((! expected)) {
      _$jscoverage['qunit/qunit.js'][416]++;
      ok = true;
    }
    else {
      _$jscoverage['qunit/qunit.js'][418]++;
      if ((QUnit.objectType(expected) === "regexp")) {
        _$jscoverage['qunit/qunit.js'][419]++;
        ok = expected.test(actual);
      }
      else {
        _$jscoverage['qunit/qunit.js'][421]++;
        if ((actual instanceof expected)) {
          _$jscoverage['qunit/qunit.js'][422]++;
          ok = true;
        }
        else {
          _$jscoverage['qunit/qunit.js'][424]++;
          if ((expected.call({}, actual) === true)) {
            _$jscoverage['qunit/qunit.js'][425]++;
            ok = true;
          }
        }
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][429]++;
  QUnit.ok(ok, message);
}), start: (function (count) {
  _$jscoverage['qunit/qunit.js'][433]++;
  config.semaphore -= (count || 1);
  _$jscoverage['qunit/qunit.js'][435]++;
  if ((config.semaphore > 0)) {
    _$jscoverage['qunit/qunit.js'][436]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][439]++;
  if ((config.semaphore < 0)) {
    _$jscoverage['qunit/qunit.js'][440]++;
    config.semaphore = 0;
  }
  _$jscoverage['qunit/qunit.js'][443]++;
  if (defined.setTimeout) {
    _$jscoverage['qunit/qunit.js'][444]++;
    window.setTimeout((function () {
  _$jscoverage['qunit/qunit.js'][445]++;
  if ((config.semaphore > 0)) {
    _$jscoverage['qunit/qunit.js'][446]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][448]++;
  if (config.timeout) {
    _$jscoverage['qunit/qunit.js'][449]++;
    clearTimeout(config.timeout);
  }
  _$jscoverage['qunit/qunit.js'][452]++;
  config.blocking = false;
  _$jscoverage['qunit/qunit.js'][453]++;
  process(true);
}), 13);
  }
  else {
    _$jscoverage['qunit/qunit.js'][456]++;
    config.blocking = false;
    _$jscoverage['qunit/qunit.js'][457]++;
    process(true);
  }
}), stop: (function (count) {
  _$jscoverage['qunit/qunit.js'][462]++;
  config.semaphore += (count || 1);
  _$jscoverage['qunit/qunit.js'][463]++;
  config.blocking = true;
  _$jscoverage['qunit/qunit.js'][465]++;
  if ((config.testTimeout && defined.setTimeout)) {
    _$jscoverage['qunit/qunit.js'][466]++;
    clearTimeout(config.timeout);
    _$jscoverage['qunit/qunit.js'][467]++;
    config.timeout = window.setTimeout((function () {
  _$jscoverage['qunit/qunit.js'][468]++;
  QUnit.ok(false, "Test timed out");
  _$jscoverage['qunit/qunit.js'][469]++;
  config.semaphore = 1;
  _$jscoverage['qunit/qunit.js'][470]++;
  QUnit.start();
}), config.testTimeout);
  }
})};
  _$jscoverage['qunit/qunit.js'][477]++;
  (function () {
  _$jscoverage['qunit/qunit.js'][478]++;
  function F() {
}
  _$jscoverage['qunit/qunit.js'][479]++;
  F.prototype = QUnit;
  _$jscoverage['qunit/qunit.js'][480]++;
  QUnit = new F();
  _$jscoverage['qunit/qunit.js'][482]++;
  QUnit.constructor = F;
})();
  _$jscoverage['qunit/qunit.js'][487]++;
  QUnit.equals = (function () {
  _$jscoverage['qunit/qunit.js'][488]++;
  QUnit.push(false, false, false, "QUnit.equals has been deprecated since 2009 (e88049a0), use QUnit.equal instead");
});
  _$jscoverage['qunit/qunit.js'][490]++;
  QUnit.same = (function () {
  _$jscoverage['qunit/qunit.js'][491]++;
  QUnit.push(false, false, false, "QUnit.same has been deprecated since 2009 (e88049a0), use QUnit.deepEqual instead");
});
  _$jscoverage['qunit/qunit.js'][496]++;
  config = {queue: [], blocking: true, hidepassed: false, reorder: true, altertitle: true, urlConfig: ["noglobals", "notrycatch"], begin: [], done: [], log: [], testStart: [], testDone: [], moduleStart: [], moduleDone: []};
  _$jscoverage['qunit/qunit.js'][527]++;
  (function () {
  _$jscoverage['qunit/qunit.js'][528]++;
  var i, location = (window.location || {search: "", protocol: "file:"}), params = location.search.slice(1).split("&"), length = params.length, urlParams = {}, current;
  _$jscoverage['qunit/qunit.js'][535]++;
  if (params[0]) {
    _$jscoverage['qunit/qunit.js'][536]++;
    for (i = 0; (i < length); (i++)) {
      _$jscoverage['qunit/qunit.js'][537]++;
      current = params[i].split("=");
      _$jscoverage['qunit/qunit.js'][538]++;
      current[0] = decodeURIComponent(current[0]);
      _$jscoverage['qunit/qunit.js'][540]++;
      current[1] = (current[1]? decodeURIComponent(current[1]): true);
      _$jscoverage['qunit/qunit.js'][541]++;
      urlParams[current[0]] = current[1];
}
  }
  _$jscoverage['qunit/qunit.js'][545]++;
  QUnit.urlParams = urlParams;
  _$jscoverage['qunit/qunit.js'][546]++;
  config.filter = urlParams.filter;
  _$jscoverage['qunit/qunit.js'][549]++;
  QUnit.isLocal = (location.protocol === "file:");
})();
  _$jscoverage['qunit/qunit.js'][554]++;
  if (((typeof exports) === "undefined")) {
    _$jscoverage['qunit/qunit.js'][555]++;
    extend(window, QUnit);
    _$jscoverage['qunit/qunit.js'][556]++;
    window.QUnit = QUnit;
  }
  _$jscoverage['qunit/qunit.js'][560]++;
  extend(QUnit, {config: config, init: (function () {
  _$jscoverage['qunit/qunit.js'][565]++;
  extend(config, {stats: {all: 0, bad: 0}, moduleStats: {all: 0, bad: 0}, started: (+ new Date()), updateRate: 1000, blocking: false, autostart: true, autorun: false, filter: "", queue: [], semaphore: 0});
  _$jscoverage['qunit/qunit.js'][578]++;
  var tests, banner, result, qunit = id("qunit");
  _$jscoverage['qunit/qunit.js'][581]++;
  if (qunit) {
    _$jscoverage['qunit/qunit.js'][582]++;
    qunit.innerHTML = ("<h1 id='qunit-header'>" + escapeInnerText(document.title) + "</h1>" + "<h2 id='qunit-banner'></h2>" + "<div id='qunit-testrunner-toolbar'></div>" + "<h2 id='qunit-userAgent'></h2>" + "<ol id='qunit-tests'></ol>");
  }
  _$jscoverage['qunit/qunit.js'][590]++;
  tests = id("qunit-tests");
  _$jscoverage['qunit/qunit.js'][591]++;
  banner = id("qunit-banner");
  _$jscoverage['qunit/qunit.js'][592]++;
  result = id("qunit-testresult");
  _$jscoverage['qunit/qunit.js'][594]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][595]++;
    tests.innerHTML = "";
  }
  _$jscoverage['qunit/qunit.js'][598]++;
  if (banner) {
    _$jscoverage['qunit/qunit.js'][599]++;
    banner.className = "";
  }
  _$jscoverage['qunit/qunit.js'][602]++;
  if (result) {
    _$jscoverage['qunit/qunit.js'][603]++;
    result.parentNode.removeChild(result);
  }
  _$jscoverage['qunit/qunit.js'][606]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][607]++;
    result = document.createElement("p");
    _$jscoverage['qunit/qunit.js'][608]++;
    result.id = "qunit-testresult";
    _$jscoverage['qunit/qunit.js'][609]++;
    result.className = "result";
    _$jscoverage['qunit/qunit.js'][610]++;
    tests.parentNode.insertBefore(result, tests);
    _$jscoverage['qunit/qunit.js'][611]++;
    result.innerHTML = "Running...<br/>&nbsp;";
  }
}), reset: (function () {
  _$jscoverage['qunit/qunit.js'][618]++;
  var fixture;
  _$jscoverage['qunit/qunit.js'][620]++;
  if (window.jQuery) {
    _$jscoverage['qunit/qunit.js'][621]++;
    jQuery("#qunit-fixture").html(config.fixture);
  }
  else {
    _$jscoverage['qunit/qunit.js'][623]++;
    fixture = id("qunit-fixture");
    _$jscoverage['qunit/qunit.js'][624]++;
    if (fixture) {
      _$jscoverage['qunit/qunit.js'][625]++;
      fixture.innerHTML = config.fixture;
    }
  }
}), triggerEvent: (function (elem, type, event) {
  _$jscoverage['qunit/qunit.js'][633]++;
  if (document.createEvent) {
    _$jscoverage['qunit/qunit.js'][634]++;
    event = document.createEvent("MouseEvents");
    _$jscoverage['qunit/qunit.js'][635]++;
    event.initMouseEvent(type, true, true, elem.ownerDocument.defaultView, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    _$jscoverage['qunit/qunit.js'][638]++;
    elem.dispatchEvent(event);
  }
  else {
    _$jscoverage['qunit/qunit.js'][639]++;
    if (elem.fireEvent) {
      _$jscoverage['qunit/qunit.js'][640]++;
      elem.fireEvent(("on" + type));
    }
  }
}), is: (function (type, obj) {
  _$jscoverage['qunit/qunit.js'][646]++;
  return (QUnit.objectType(obj) == type);
}), objectType: (function (obj) {
  _$jscoverage['qunit/qunit.js'][650]++;
  if (((typeof obj) === "undefined")) {
    _$jscoverage['qunit/qunit.js'][651]++;
    return "undefined";
  }
  _$jscoverage['qunit/qunit.js'][654]++;
  if ((obj === null)) {
    _$jscoverage['qunit/qunit.js'][655]++;
    return "null";
  }
  _$jscoverage['qunit/qunit.js'][658]++;
  var type = (toString.call(obj).match(/^\[object\s(.*)\]$/)[1] || "");
  _$jscoverage['qunit/qunit.js'][660]++;
  switch (type) {
  case "Number":
    _$jscoverage['qunit/qunit.js'][662]++;
    if (isNaN(obj)) {
      _$jscoverage['qunit/qunit.js'][663]++;
      return "nan";
    }
    _$jscoverage['qunit/qunit.js'][665]++;
    return "number";
  case "String":
  case "Boolean":
  case "Array":
  case "Date":
  case "RegExp":
  case "Function":
    _$jscoverage['qunit/qunit.js'][672]++;
    return type.toLowerCase();
  }
  _$jscoverage['qunit/qunit.js'][674]++;
  if (((typeof obj) === "object")) {
    _$jscoverage['qunit/qunit.js'][675]++;
    return "object";
  }
  _$jscoverage['qunit/qunit.js'][677]++;
  return undefined;
}), push: (function (result, actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][681]++;
  if ((! config.current)) {
    _$jscoverage['qunit/qunit.js'][682]++;
    throw new Error(("assertion outside test context, was " + sourceFromStacktrace()));
  }
  _$jscoverage['qunit/qunit.js'][685]++;
  var output, source, details = {result: result, message: message, actual: actual, expected: expected};
  _$jscoverage['qunit/qunit.js'][693]++;
  message = (escapeInnerText(message) || (result? "okay": "failed"));
  _$jscoverage['qunit/qunit.js'][694]++;
  message = ("<span class='test-message'>" + message + "</span>");
  _$jscoverage['qunit/qunit.js'][695]++;
  output = message;
  _$jscoverage['qunit/qunit.js'][697]++;
  if ((! result)) {
    _$jscoverage['qunit/qunit.js'][698]++;
    expected = escapeInnerText(QUnit.jsDump.parse(expected));
    _$jscoverage['qunit/qunit.js'][699]++;
    actual = escapeInnerText(QUnit.jsDump.parse(actual));
    _$jscoverage['qunit/qunit.js'][700]++;
    output += ("<table><tr class='test-expected'><th>Expected: </th><td><pre>" + expected + "</pre></td></tr>");
    _$jscoverage['qunit/qunit.js'][702]++;
    if ((actual != expected)) {
      _$jscoverage['qunit/qunit.js'][703]++;
      output += ("<tr class='test-actual'><th>Result: </th><td><pre>" + actual + "</pre></td></tr>");
      _$jscoverage['qunit/qunit.js'][704]++;
      output += ("<tr class='test-diff'><th>Diff: </th><td><pre>" + QUnit.diff(expected, actual) + "</pre></td></tr>");
    }
    _$jscoverage['qunit/qunit.js'][707]++;
    source = sourceFromStacktrace();
    _$jscoverage['qunit/qunit.js'][709]++;
    if (source) {
      _$jscoverage['qunit/qunit.js'][710]++;
      details.source = source;
      _$jscoverage['qunit/qunit.js'][711]++;
      output += ("<tr class='test-source'><th>Source: </th><td><pre>" + escapeInnerText(source) + "</pre></td></tr>");
    }
    _$jscoverage['qunit/qunit.js'][714]++;
    output += "</table>";
  }
  _$jscoverage['qunit/qunit.js'][717]++;
  runLoggingCallbacks("log", QUnit, details);
  _$jscoverage['qunit/qunit.js'][719]++;
  config.current.assertions.push({result: (! (! result)), message: output});
}), pushFailure: (function (message, source) {
  _$jscoverage['qunit/qunit.js'][726]++;
  var output, details = {result: false, message: message};
  _$jscoverage['qunit/qunit.js'][732]++;
  message = (escapeInnerText(message) || "error");
  _$jscoverage['qunit/qunit.js'][733]++;
  message = ("<span class='test-message'>" + message + "</span>");
  _$jscoverage['qunit/qunit.js'][734]++;
  output = message;
  _$jscoverage['qunit/qunit.js'][736]++;
  if (source) {
    _$jscoverage['qunit/qunit.js'][737]++;
    details.source = source;
    _$jscoverage['qunit/qunit.js'][738]++;
    output += ("<table><tr class='test-source'><th>Source: </th><td><pre>" + escapeInnerText(source) + "</pre></td></tr></table>");
  }
  _$jscoverage['qunit/qunit.js'][741]++;
  runLoggingCallbacks("log", QUnit, details);
  _$jscoverage['qunit/qunit.js'][743]++;
  config.current.assertions.push({result: false, message: output});
}), url: (function (params) {
  _$jscoverage['qunit/qunit.js'][750]++;
  params = extend(extend({}, QUnit.urlParams), params);
  _$jscoverage['qunit/qunit.js'][751]++;
  var key, querystring = "?";
  _$jscoverage['qunit/qunit.js'][754]++;
  for (key in params) {
    _$jscoverage['qunit/qunit.js'][755]++;
    if ((! hasOwn.call(params, key))) {
      _$jscoverage['qunit/qunit.js'][756]++;
      continue;
    }
    _$jscoverage['qunit/qunit.js'][758]++;
    querystring += (encodeURIComponent(key) + "=" + encodeURIComponent(params[key]) + "&");
}
  _$jscoverage['qunit/qunit.js'][761]++;
  return (window.location.pathname + querystring.slice(0, -1));
}), extend: extend, id: id, addEvent: addEvent});
  _$jscoverage['qunit/qunit.js'][772]++;
  extend(QUnit.constructor.prototype, {begin: registerLoggingCallback("begin"), done: registerLoggingCallback("done"), log: registerLoggingCallback("log"), testStart: registerLoggingCallback("testStart"), testDone: registerLoggingCallback("testDone"), moduleStart: registerLoggingCallback("moduleStart"), moduleDone: registerLoggingCallback("moduleDone")});
  _$jscoverage['qunit/qunit.js'][790]++;
  if ((((typeof document) === "undefined") || (document.readyState === "complete"))) {
    _$jscoverage['qunit/qunit.js'][791]++;
    config.autorun = true;
  }
  _$jscoverage['qunit/qunit.js'][794]++;
  QUnit.load = (function () {
  _$jscoverage['qunit/qunit.js'][795]++;
  runLoggingCallbacks("begin", QUnit, {});
  _$jscoverage['qunit/qunit.js'][798]++;
  var banner, filter, i, label, len, main, ol, toolbar, userAgent, val, urlConfigHtml = "", oldconfig = extend({}, config);
  _$jscoverage['qunit/qunit.js'][802]++;
  QUnit.init();
  _$jscoverage['qunit/qunit.js'][803]++;
  extend(config, oldconfig);
  _$jscoverage['qunit/qunit.js'][805]++;
  config.blocking = false;
  _$jscoverage['qunit/qunit.js'][807]++;
  len = config.urlConfig.length;
  _$jscoverage['qunit/qunit.js'][809]++;
  for (i = 0; (i < len); (i++)) {
    _$jscoverage['qunit/qunit.js'][810]++;
    val = config.urlConfig[i];
    _$jscoverage['qunit/qunit.js'][811]++;
    config[val] = QUnit.urlParams[val];
    _$jscoverage['qunit/qunit.js'][812]++;
    urlConfigHtml += ("<label><input name='" + val + "' type='checkbox'" + (config[val]? " checked='checked'": "") + ">" + val + "</label>");
}
  _$jscoverage['qunit/qunit.js'][816]++;
  userAgent = id("qunit-userAgent");
  _$jscoverage['qunit/qunit.js'][817]++;
  if (userAgent) {
    _$jscoverage['qunit/qunit.js'][818]++;
    userAgent.innerHTML = navigator.userAgent;
  }
  _$jscoverage['qunit/qunit.js'][822]++;
  banner = id("qunit-header");
  _$jscoverage['qunit/qunit.js'][823]++;
  if (banner) {
    _$jscoverage['qunit/qunit.js'][824]++;
    banner.innerHTML = ("<a href='" + QUnit.url({filter: undefined}) + "'>" + banner.innerHTML + "</a> " + urlConfigHtml);
    _$jscoverage['qunit/qunit.js'][825]++;
    addEvent(banner, "change", (function (event) {
  _$jscoverage['qunit/qunit.js'][826]++;
  var params = {};
  _$jscoverage['qunit/qunit.js'][827]++;
  params[event.target.name] = (event.target.checked? true: undefined);
  _$jscoverage['qunit/qunit.js'][828]++;
  window.location = QUnit.url(params);
}));
  }
  _$jscoverage['qunit/qunit.js'][833]++;
  toolbar = id("qunit-testrunner-toolbar");
  _$jscoverage['qunit/qunit.js'][834]++;
  if (toolbar) {
    _$jscoverage['qunit/qunit.js'][836]++;
    filter = document.createElement("input");
    _$jscoverage['qunit/qunit.js'][837]++;
    filter.type = "checkbox";
    _$jscoverage['qunit/qunit.js'][838]++;
    filter.id = "qunit-filter-pass";
    _$jscoverage['qunit/qunit.js'][840]++;
    addEvent(filter, "click", (function () {
  _$jscoverage['qunit/qunit.js'][841]++;
  var tmp, ol = document.getElementById("qunit-tests");
  _$jscoverage['qunit/qunit.js'][844]++;
  if (filter.checked) {
    _$jscoverage['qunit/qunit.js'][845]++;
    ol.className = (ol.className + " hidepass");
  }
  else {
    _$jscoverage['qunit/qunit.js'][847]++;
    tmp = (" " + ol.className.replace(/[\n\t\r]/g, " ") + " ");
    _$jscoverage['qunit/qunit.js'][848]++;
    ol.className = tmp.replace(/ hidepass /, " ");
  }
  _$jscoverage['qunit/qunit.js'][850]++;
  if (defined.sessionStorage) {
    _$jscoverage['qunit/qunit.js'][851]++;
    if (filter.checked) {
      _$jscoverage['qunit/qunit.js'][852]++;
      sessionStorage.setItem("qunit-filter-passed-tests", "true");
    }
    else {
      _$jscoverage['qunit/qunit.js'][854]++;
      sessionStorage.removeItem("qunit-filter-passed-tests");
    }
  }
}));
    _$jscoverage['qunit/qunit.js'][859]++;
    if ((config.hidepassed || (defined.sessionStorage && sessionStorage.getItem("qunit-filter-passed-tests")))) {
      _$jscoverage['qunit/qunit.js'][860]++;
      filter.checked = true;
      _$jscoverage['qunit/qunit.js'][862]++;
      ol = document.getElementById("qunit-tests");
      _$jscoverage['qunit/qunit.js'][863]++;
      ol.className = (ol.className + " hidepass");
    }
    _$jscoverage['qunit/qunit.js'][865]++;
    toolbar.appendChild(filter);
    _$jscoverage['qunit/qunit.js'][868]++;
    label = document.createElement("label");
    _$jscoverage['qunit/qunit.js'][869]++;
    label.setAttribute("for", "qunit-filter-pass");
    _$jscoverage['qunit/qunit.js'][870]++;
    label.innerHTML = "Hide passed tests";
    _$jscoverage['qunit/qunit.js'][871]++;
    toolbar.appendChild(label);
  }
  _$jscoverage['qunit/qunit.js'][875]++;
  main = id("qunit-fixture");
  _$jscoverage['qunit/qunit.js'][876]++;
  if (main) {
    _$jscoverage['qunit/qunit.js'][877]++;
    config.fixture = main.innerHTML;
  }
  _$jscoverage['qunit/qunit.js'][880]++;
  if (config.autostart) {
    _$jscoverage['qunit/qunit.js'][881]++;
    QUnit.start();
  }
});
  _$jscoverage['qunit/qunit.js'][885]++;
  addEvent(window, "load", QUnit.load);
  _$jscoverage['qunit/qunit.js'][888]++;
  window.onerror = (function (message, file, line) {
  _$jscoverage['qunit/qunit.js'][889]++;
  if (QUnit.config.current) {
    _$jscoverage['qunit/qunit.js'][890]++;
    QUnit.pushFailure(message, (file + ":" + line));
  }
  else {
    _$jscoverage['qunit/qunit.js'][892]++;
    QUnit.test("global failure", (function () {
  _$jscoverage['qunit/qunit.js'][893]++;
  QUnit.pushFailure(message, (file + ":" + line));
}));
  }
});
  _$jscoverage['qunit/qunit.js'][898]++;
  function done() {
    _$jscoverage['qunit/qunit.js'][899]++;
    config.autorun = true;
    _$jscoverage['qunit/qunit.js'][902]++;
    if (config.currentModule) {
      _$jscoverage['qunit/qunit.js'][903]++;
      runLoggingCallbacks("moduleDone", QUnit, {name: config.currentModule, failed: config.moduleStats.bad, passed: (config.moduleStats.all - config.moduleStats.bad), total: config.moduleStats.all});
    }
    _$jscoverage['qunit/qunit.js'][911]++;
    var i, key, banner = id("qunit-banner"), tests = id("qunit-tests"), runtime = ((+ new Date()) - config.started), passed = (config.stats.all - config.stats.bad), html = ["Tests completed in ", runtime, " milliseconds.<br/>", "<span class='passed'>", passed, "</span> tests of <span class='total'>", config.stats.all, "</span> passed, <span class='failed'>", config.stats.bad, "</span> failed."].join("");
    _$jscoverage['qunit/qunit.js'][929]++;
    if (banner) {
      _$jscoverage['qunit/qunit.js'][930]++;
      banner.className = (config.stats.bad? "qunit-fail": "qunit-pass");
    }
    _$jscoverage['qunit/qunit.js'][933]++;
    if (tests) {
      _$jscoverage['qunit/qunit.js'][934]++;
      id("qunit-testresult").innerHTML = html;
    }
    _$jscoverage['qunit/qunit.js'][937]++;
    if ((config.altertitle && ((typeof document) !== "undefined") && document.title)) {
      _$jscoverage['qunit/qunit.js'][940]++;
      document.title = [(config.stats.bad? "\u2716": "\u2714"), document.title.replace(/^[\u2714\u2716] /i, "")].join(" ");
    }
    _$jscoverage['qunit/qunit.js'][947]++;
    if ((config.reorder && defined.sessionStorage && (config.stats.bad === 0))) {
      _$jscoverage['qunit/qunit.js'][949]++;
      for (i = 0; (i < sessionStorage.length); (i++)) {
        _$jscoverage['qunit/qunit.js'][950]++;
        key = sessionStorage.key((i++));
        _$jscoverage['qunit/qunit.js'][951]++;
        if ((key.indexOf("qunit-test-") === 0)) {
          _$jscoverage['qunit/qunit.js'][952]++;
          sessionStorage.removeItem(key);
        }
}
    }
    _$jscoverage['qunit/qunit.js'][957]++;
    runLoggingCallbacks("done", QUnit, {failed: config.stats.bad, passed: passed, total: config.stats.all, runtime: runtime});
}
  _$jscoverage['qunit/qunit.js'][965]++;
  function validTest(name) {
    _$jscoverage['qunit/qunit.js'][966]++;
    var not, filter = config.filter, run = false;
    _$jscoverage['qunit/qunit.js'][970]++;
    if ((! filter)) {
      _$jscoverage['qunit/qunit.js'][971]++;
      return true;
    }
    _$jscoverage['qunit/qunit.js'][974]++;
    not = (filter.charAt(0) === "!");
    _$jscoverage['qunit/qunit.js'][976]++;
    if (not) {
      _$jscoverage['qunit/qunit.js'][977]++;
      filter = filter.slice(1);
    }
    _$jscoverage['qunit/qunit.js'][980]++;
    if ((name.indexOf(filter) !== -1)) {
      _$jscoverage['qunit/qunit.js'][981]++;
      return (! not);
    }
    _$jscoverage['qunit/qunit.js'][984]++;
    if (not) {
      _$jscoverage['qunit/qunit.js'][985]++;
      run = true;
    }
    _$jscoverage['qunit/qunit.js'][988]++;
    return run;
}
  _$jscoverage['qunit/qunit.js'][994]++;
  function extractStacktrace(e, offset) {
    _$jscoverage['qunit/qunit.js'][995]++;
    offset = (offset || 3);
    _$jscoverage['qunit/qunit.js'][997]++;
    var stack;
    _$jscoverage['qunit/qunit.js'][999]++;
    if (e.stacktrace) {
      _$jscoverage['qunit/qunit.js'][1001]++;
      return e.stacktrace.split("\n")[(offset + 3)];
    }
    else {
      _$jscoverage['qunit/qunit.js'][1002]++;
      if (e.stack) {
        _$jscoverage['qunit/qunit.js'][1004]++;
        stack = e.stack.split("\n");
        _$jscoverage['qunit/qunit.js'][1005]++;
        if (/^error$/i.test(stack[0])) {
          _$jscoverage['qunit/qunit.js'][1006]++;
          stack.shift();
        }
        _$jscoverage['qunit/qunit.js'][1008]++;
        return stack[offset];
      }
      else {
        _$jscoverage['qunit/qunit.js'][1009]++;
        if (e.sourceURL) {
          _$jscoverage['qunit/qunit.js'][1013]++;
          if (/qunit.js$/.test(e.sourceURL)) {
            _$jscoverage['qunit/qunit.js'][1014]++;
            return;
          }
          _$jscoverage['qunit/qunit.js'][1017]++;
          return (e.sourceURL + ":" + e.line);
        }
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1020]++;
  function sourceFromStacktrace(offset) {
    _$jscoverage['qunit/qunit.js'][1021]++;
    try {
      _$jscoverage['qunit/qunit.js'][1022]++;
      throw new Error();
    }
    catch (e) {
      _$jscoverage['qunit/qunit.js'][1024]++;
      return extractStacktrace(e, offset);
    }
}
  _$jscoverage['qunit/qunit.js'][1028]++;
  function escapeInnerText(s) {
    _$jscoverage['qunit/qunit.js'][1029]++;
    if ((! s)) {
      _$jscoverage['qunit/qunit.js'][1030]++;
      return "";
    }
    _$jscoverage['qunit/qunit.js'][1032]++;
    s = (s + "");
    _$jscoverage['qunit/qunit.js'][1033]++;
    return s.replace(/[\&<>]/g, (function (s) {
  _$jscoverage['qunit/qunit.js'][1034]++;
  switch (s) {
  case "&":
    _$jscoverage['qunit/qunit.js'][1035]++;
    return "&amp;";
  case "<":
    _$jscoverage['qunit/qunit.js'][1036]++;
    return "&lt;";
  case ">":
    _$jscoverage['qunit/qunit.js'][1037]++;
    return "&gt;";
  default:
    _$jscoverage['qunit/qunit.js'][1038]++;
    return s;
  }
}));
}
  _$jscoverage['qunit/qunit.js'][1043]++;
  function synchronize(callback, last) {
    _$jscoverage['qunit/qunit.js'][1044]++;
    config.queue.push(callback);
    _$jscoverage['qunit/qunit.js'][1046]++;
    if ((config.autorun && (! config.blocking))) {
      _$jscoverage['qunit/qunit.js'][1047]++;
      process(last);
    }
}
  _$jscoverage['qunit/qunit.js'][1051]++;
  function process(last) {
    _$jscoverage['qunit/qunit.js'][1052]++;
    function next() {
      _$jscoverage['qunit/qunit.js'][1053]++;
      process(last);
}
    _$jscoverage['qunit/qunit.js'][1055]++;
    var start = new Date().getTime();
    _$jscoverage['qunit/qunit.js'][1056]++;
    config.depth = (config.depth? (config.depth + 1): 1);
    _$jscoverage['qunit/qunit.js'][1058]++;
    while ((config.queue.length && (! config.blocking))) {
      _$jscoverage['qunit/qunit.js'][1059]++;
      if (((! defined.setTimeout) || (config.updateRate <= 0) || ((new Date().getTime() - start) < config.updateRate))) {
        _$jscoverage['qunit/qunit.js'][1060]++;
        (config.queue.shift())();
      }
      else {
        _$jscoverage['qunit/qunit.js'][1062]++;
        window.setTimeout(next, 13);
        _$jscoverage['qunit/qunit.js'][1063]++;
        break;
      }
}
    _$jscoverage['qunit/qunit.js'][1066]++;
    (config.depth--);
    _$jscoverage['qunit/qunit.js'][1067]++;
    if ((last && (! config.blocking) && (! config.queue.length) && (config.depth === 0))) {
      _$jscoverage['qunit/qunit.js'][1068]++;
      done();
    }
}
  _$jscoverage['qunit/qunit.js'][1072]++;
  function saveGlobal() {
    _$jscoverage['qunit/qunit.js'][1073]++;
    config.pollution = [];
    _$jscoverage['qunit/qunit.js'][1075]++;
    if (config.noglobals) {
      _$jscoverage['qunit/qunit.js'][1076]++;
      for (var key in window) {
        _$jscoverage['qunit/qunit.js'][1078]++;
        if (((! hasOwn.call(window, key)) || /^qunit-test-output/.test(key))) {
          _$jscoverage['qunit/qunit.js'][1079]++;
          continue;
        }
        _$jscoverage['qunit/qunit.js'][1081]++;
        config.pollution.push(key);
}
    }
}
  _$jscoverage['qunit/qunit.js'][1086]++;
  function checkPollution(name) {
    _$jscoverage['qunit/qunit.js'][1087]++;
    var newGlobals, deletedGlobals, old = config.pollution;
    _$jscoverage['qunit/qunit.js'][1091]++;
    saveGlobal();
    _$jscoverage['qunit/qunit.js'][1093]++;
    newGlobals = diff(config.pollution, old);
    _$jscoverage['qunit/qunit.js'][1094]++;
    if ((newGlobals.length > 0)) {
      _$jscoverage['qunit/qunit.js'][1095]++;
      QUnit.pushFailure(("Introduced global variable(s): " + newGlobals.join(", ")));
    }
    _$jscoverage['qunit/qunit.js'][1098]++;
    deletedGlobals = diff(old, config.pollution);
    _$jscoverage['qunit/qunit.js'][1099]++;
    if ((deletedGlobals.length > 0)) {
      _$jscoverage['qunit/qunit.js'][1100]++;
      QUnit.pushFailure(("Deleted global variable(s): " + deletedGlobals.join(", ")));
    }
}
  _$jscoverage['qunit/qunit.js'][1105]++;
  function diff(a, b) {
    _$jscoverage['qunit/qunit.js'][1106]++;
    var i, j, result = a.slice();
    _$jscoverage['qunit/qunit.js'][1109]++;
    for (i = 0; (i < result.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][1110]++;
      for (j = 0; (j < b.length); (j++)) {
        _$jscoverage['qunit/qunit.js'][1111]++;
        if ((result[i] === b[j])) {
          _$jscoverage['qunit/qunit.js'][1112]++;
          result.splice(i, 1);
          _$jscoverage['qunit/qunit.js'][1113]++;
          (i--);
          _$jscoverage['qunit/qunit.js'][1114]++;
          break;
        }
}
}
    _$jscoverage['qunit/qunit.js'][1118]++;
    return result;
}
  _$jscoverage['qunit/qunit.js'][1121]++;
  function extend(a, b) {
    _$jscoverage['qunit/qunit.js'][1122]++;
    for (var prop in b) {
      _$jscoverage['qunit/qunit.js'][1123]++;
      if ((b[prop] === undefined)) {
        _$jscoverage['qunit/qunit.js'][1124]++;
        (delete a[prop]);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1127]++;
        if (((prop !== "constructor") || (a !== window))) {
          _$jscoverage['qunit/qunit.js'][1128]++;
          a[prop] = b[prop];
        }
      }
}
    _$jscoverage['qunit/qunit.js'][1132]++;
    return a;
}
  _$jscoverage['qunit/qunit.js'][1135]++;
  function addEvent(elem, type, fn) {
    _$jscoverage['qunit/qunit.js'][1136]++;
    if (elem.addEventListener) {
      _$jscoverage['qunit/qunit.js'][1137]++;
      elem.addEventListener(type, fn, false);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1138]++;
      if (elem.attachEvent) {
        _$jscoverage['qunit/qunit.js'][1139]++;
        elem.attachEvent(("on" + type), fn);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1141]++;
        fn();
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1145]++;
  function id(name) {
    _$jscoverage['qunit/qunit.js'][1146]++;
    return ((! (! (((typeof document) !== "undefined") && document && document.getElementById))) && document.getElementById(name));
}
  _$jscoverage['qunit/qunit.js'][1150]++;
  function registerLoggingCallback(key) {
    _$jscoverage['qunit/qunit.js'][1151]++;
    return (function (callback) {
  _$jscoverage['qunit/qunit.js'][1152]++;
  config[key].push(callback);
});
}
  _$jscoverage['qunit/qunit.js'][1157]++;
  function runLoggingCallbacks(key, scope, args) {
    _$jscoverage['qunit/qunit.js'][1159]++;
    var i, callbacks;
    _$jscoverage['qunit/qunit.js'][1160]++;
    if (QUnit.hasOwnProperty(key)) {
      _$jscoverage['qunit/qunit.js'][1161]++;
      QUnit[key].call(scope, args);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1163]++;
      callbacks = config[key];
      _$jscoverage['qunit/qunit.js'][1164]++;
      for (i = 0; (i < callbacks.length); (i++)) {
        _$jscoverage['qunit/qunit.js'][1165]++;
        callbacks[i].call(scope, args);
}
    }
}
  _$jscoverage['qunit/qunit.js'][1172]++;
  QUnit.equiv = (function () {
  _$jscoverage['qunit/qunit.js'][1175]++;
  function bindCallbacks(o, callbacks, args) {
    _$jscoverage['qunit/qunit.js'][1176]++;
    var prop = QUnit.objectType(o);
    _$jscoverage['qunit/qunit.js'][1177]++;
    if (prop) {
      _$jscoverage['qunit/qunit.js'][1178]++;
      if ((QUnit.objectType(callbacks[prop]) === "function")) {
        _$jscoverage['qunit/qunit.js'][1179]++;
        return callbacks[prop].apply(callbacks, args);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1181]++;
        return callbacks[prop];
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1187]++;
  var innerEquiv, callers = [], parents = [], getProto = (Object.getPrototypeOf || (function (obj) {
  _$jscoverage['qunit/qunit.js'][1194]++;
  return obj.__proto__;
})), callbacks = (function () {
  _$jscoverage['qunit/qunit.js'][1199]++;
  function useStrictEquality(b, a) {
    _$jscoverage['qunit/qunit.js'][1200]++;
    if (((b instanceof a.constructor) || (a instanceof b.constructor))) {
      _$jscoverage['qunit/qunit.js'][1205]++;
      return (a == b);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1207]++;
      return (a === b);
    }
}
  _$jscoverage['qunit/qunit.js'][1211]++;
  return ({"string": useStrictEquality, "boolean": useStrictEquality, "number": useStrictEquality, "null": useStrictEquality, "undefined": useStrictEquality, "nan": (function (b) {
  _$jscoverage['qunit/qunit.js'][1219]++;
  return isNaN(b);
}), "date": (function (b, a) {
  _$jscoverage['qunit/qunit.js'][1223]++;
  return ((QUnit.objectType(b) === "date") && (a.valueOf() === b.valueOf()));
}), "regexp": (function (b, a) {
  _$jscoverage['qunit/qunit.js'][1227]++;
  return ((QUnit.objectType(b) === "regexp") && (a.source === b.source) && (a.global === b.global) && (a.ignoreCase === b.ignoreCase) && (a.multiline === b.multiline));
}), "function": (function () {
  _$jscoverage['qunit/qunit.js'][1241]++;
  var caller = callers[(callers.length - 1)];
  _$jscoverage['qunit/qunit.js'][1242]++;
  return ((caller !== Object) && ((typeof caller) !== "undefined"));
}), "array": (function (b, a) {
  _$jscoverage['qunit/qunit.js'][1246]++;
  var i, j, len, loop;
  _$jscoverage['qunit/qunit.js'][1249]++;
  if ((QUnit.objectType(b) !== "array")) {
    _$jscoverage['qunit/qunit.js'][1250]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][1253]++;
  len = a.length;
  _$jscoverage['qunit/qunit.js'][1254]++;
  if ((len !== b.length)) {
    _$jscoverage['qunit/qunit.js'][1256]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][1260]++;
  parents.push(a);
  _$jscoverage['qunit/qunit.js'][1261]++;
  for (i = 0; (i < len); (i++)) {
    _$jscoverage['qunit/qunit.js'][1262]++;
    loop = false;
    _$jscoverage['qunit/qunit.js'][1263]++;
    for (j = 0; (j < parents.length); (j++)) {
      _$jscoverage['qunit/qunit.js'][1264]++;
      if ((parents[j] === a[i])) {
        _$jscoverage['qunit/qunit.js'][1265]++;
        loop = true;
      }
}
    _$jscoverage['qunit/qunit.js'][1268]++;
    if (((! loop) && (! innerEquiv(a[i], b[i])))) {
      _$jscoverage['qunit/qunit.js'][1269]++;
      parents.pop();
      _$jscoverage['qunit/qunit.js'][1270]++;
      return false;
    }
}
  _$jscoverage['qunit/qunit.js'][1273]++;
  parents.pop();
  _$jscoverage['qunit/qunit.js'][1274]++;
  return true;
}), "object": (function (b, a) {
  _$jscoverage['qunit/qunit.js'][1278]++;
  var i, j, loop, eq = true, aProperties = [], bProperties = [];
  _$jscoverage['qunit/qunit.js'][1286]++;
  if ((a.constructor !== b.constructor)) {
    _$jscoverage['qunit/qunit.js'][1289]++;
    if ((! (((getProto(a) === null) && (getProto(b) === Object.prototype)) || ((getProto(b) === null) && (getProto(a) === Object.prototype))))) {
      _$jscoverage['qunit/qunit.js'][1291]++;
      return false;
    }
  }
  _$jscoverage['qunit/qunit.js'][1296]++;
  callers.push(a.constructor);
  _$jscoverage['qunit/qunit.js'][1298]++;
  parents.push(a);
  _$jscoverage['qunit/qunit.js'][1300]++;
  for (i in a) {
    _$jscoverage['qunit/qunit.js'][1302]++;
    loop = false;
    _$jscoverage['qunit/qunit.js'][1303]++;
    for (j = 0; (j < parents.length); (j++)) {
      _$jscoverage['qunit/qunit.js'][1304]++;
      if ((parents[j] === a[i])) {
        _$jscoverage['qunit/qunit.js'][1306]++;
        loop = true;
      }
}
    _$jscoverage['qunit/qunit.js'][1309]++;
    aProperties.push(i);
    _$jscoverage['qunit/qunit.js'][1311]++;
    if (((! loop) && (! innerEquiv(a[i], b[i])))) {
      _$jscoverage['qunit/qunit.js'][1312]++;
      eq = false;
      _$jscoverage['qunit/qunit.js'][1313]++;
      break;
    }
}
  _$jscoverage['qunit/qunit.js'][1317]++;
  callers.pop();
  _$jscoverage['qunit/qunit.js'][1318]++;
  parents.pop();
  _$jscoverage['qunit/qunit.js'][1320]++;
  for (i in b) {
    _$jscoverage['qunit/qunit.js'][1321]++;
    bProperties.push(i);
}
  _$jscoverage['qunit/qunit.js'][1325]++;
  return (eq && innerEquiv(aProperties.sort(), bProperties.sort()));
})});
})();
  _$jscoverage['qunit/qunit.js'][1330]++;
  innerEquiv = (function () {
  _$jscoverage['qunit/qunit.js'][1331]++;
  var args = [].slice.apply(arguments);
  _$jscoverage['qunit/qunit.js'][1332]++;
  if ((args.length < 2)) {
    _$jscoverage['qunit/qunit.js'][1333]++;
    return true;
  }
  _$jscoverage['qunit/qunit.js'][1336]++;
  return ((function (a, b) {
  _$jscoverage['qunit/qunit.js'][1337]++;
  if ((a === b)) {
    _$jscoverage['qunit/qunit.js'][1338]++;
    return true;
  }
  else {
    _$jscoverage['qunit/qunit.js'][1339]++;
    if (((a === null) || (b === null) || ((typeof a) === "undefined") || ((typeof b) === "undefined") || (QUnit.objectType(a) !== QUnit.objectType(b)))) {
      _$jscoverage['qunit/qunit.js'][1342]++;
      return false;
    }
    else {
      _$jscoverage['qunit/qunit.js'][1344]++;
      return bindCallbacks(a, callbacks, [b, a]);
    }
  }
})(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, (args.length - 1))));
});
  _$jscoverage['qunit/qunit.js'][1351]++;
  return innerEquiv;
})();
  _$jscoverage['qunit/qunit.js'][1364]++;
  QUnit.jsDump = (function () {
  _$jscoverage['qunit/qunit.js'][1365]++;
  function quote(str) {
    _$jscoverage['qunit/qunit.js'][1366]++;
    return ("\"" + str.toString().replace(/"/g, "\\\"") + "\"");
}
  _$jscoverage['qunit/qunit.js'][1368]++;
  function literal(o) {
    _$jscoverage['qunit/qunit.js'][1369]++;
    return (o + "");
}
  _$jscoverage['qunit/qunit.js'][1371]++;
  function join(pre, arr, post) {
    _$jscoverage['qunit/qunit.js'][1372]++;
    var s = jsDump.separator(), base = jsDump.indent(), inner = jsDump.indent(1);
    _$jscoverage['qunit/qunit.js'][1375]++;
    if (arr.join) {
      _$jscoverage['qunit/qunit.js'][1376]++;
      arr = arr.join(("," + s + inner));
    }
    _$jscoverage['qunit/qunit.js'][1378]++;
    if ((! arr)) {
      _$jscoverage['qunit/qunit.js'][1379]++;
      return (pre + post);
    }
    _$jscoverage['qunit/qunit.js'][1381]++;
    return [pre, (inner + arr), (base + post)].join(s);
}
  _$jscoverage['qunit/qunit.js'][1383]++;
  function array(arr, stack) {
    _$jscoverage['qunit/qunit.js'][1384]++;
    var i = arr.length, ret = new Array(i);
    _$jscoverage['qunit/qunit.js'][1385]++;
    this.up();
    _$jscoverage['qunit/qunit.js'][1386]++;
    while ((i--)) {
      _$jscoverage['qunit/qunit.js'][1387]++;
      ret[i] = this.parse(arr[i], undefined, stack);
}
    _$jscoverage['qunit/qunit.js'][1389]++;
    this.down();
    _$jscoverage['qunit/qunit.js'][1390]++;
    return join("[", ret, "]");
}
  _$jscoverage['qunit/qunit.js'][1393]++;
  var reName = /^function (\w+)/, jsDump = {parse: (function (obj, type, stack) {
  _$jscoverage['qunit/qunit.js'][1396]++;
  stack = (stack || []);
  _$jscoverage['qunit/qunit.js'][1397]++;
  var inStack, res, parser = this.parsers[(type || this.typeOf(obj))];
  _$jscoverage['qunit/qunit.js'][1400]++;
  type = (typeof parser);
  _$jscoverage['qunit/qunit.js'][1401]++;
  inStack = inArray(obj, stack);
  _$jscoverage['qunit/qunit.js'][1403]++;
  if ((inStack != -1)) {
    _$jscoverage['qunit/qunit.js'][1404]++;
    return ("recursion(" + (inStack - stack.length) + ")");
  }
  _$jscoverage['qunit/qunit.js'][1407]++;
  if ((type == "function")) {
    _$jscoverage['qunit/qunit.js'][1408]++;
    stack.push(obj);
    _$jscoverage['qunit/qunit.js'][1409]++;
    res = parser.call(this, obj, stack);
    _$jscoverage['qunit/qunit.js'][1410]++;
    stack.pop();
    _$jscoverage['qunit/qunit.js'][1411]++;
    return res;
  }
  _$jscoverage['qunit/qunit.js'][1414]++;
  return ((type == "string")? parser: this.parsers.error);
}), typeOf: (function (obj) {
  _$jscoverage['qunit/qunit.js'][1417]++;
  var type;
  _$jscoverage['qunit/qunit.js'][1418]++;
  if ((obj === null)) {
    _$jscoverage['qunit/qunit.js'][1419]++;
    type = "null";
  }
  else {
    _$jscoverage['qunit/qunit.js'][1420]++;
    if (((typeof obj) === "undefined")) {
      _$jscoverage['qunit/qunit.js'][1421]++;
      type = "undefined";
    }
    else {
      _$jscoverage['qunit/qunit.js'][1422]++;
      if (QUnit.is("RegExp", obj)) {
        _$jscoverage['qunit/qunit.js'][1423]++;
        type = "regexp";
      }
      else {
        _$jscoverage['qunit/qunit.js'][1424]++;
        if (QUnit.is("Date", obj)) {
          _$jscoverage['qunit/qunit.js'][1425]++;
          type = "date";
        }
        else {
          _$jscoverage['qunit/qunit.js'][1426]++;
          if (QUnit.is("Function", obj)) {
            _$jscoverage['qunit/qunit.js'][1427]++;
            type = "function";
          }
          else {
            _$jscoverage['qunit/qunit.js'][1428]++;
            if ((((typeof obj.setInterval) !== undefined) && ((typeof obj.document) !== "undefined") && ((typeof obj.nodeType) === "undefined"))) {
              _$jscoverage['qunit/qunit.js'][1429]++;
              type = "window";
            }
            else {
              _$jscoverage['qunit/qunit.js'][1430]++;
              if ((obj.nodeType === 9)) {
                _$jscoverage['qunit/qunit.js'][1431]++;
                type = "document";
              }
              else {
                _$jscoverage['qunit/qunit.js'][1432]++;
                if (obj.nodeType) {
                  _$jscoverage['qunit/qunit.js'][1433]++;
                  type = "node";
                }
                else {
                  _$jscoverage['qunit/qunit.js'][1434]++;
                  if (((toString.call(obj) === "[object Array]") || (((typeof obj.length) === "number") && ((typeof obj.item) !== "undefined") && (obj.length? (obj.item(0) === obj[0]): ((obj.item(0) === null) && ((typeof obj[0]) === "undefined")))))) {
                    _$jscoverage['qunit/qunit.js'][1440]++;
                    type = "array";
                  }
                  else {
                    _$jscoverage['qunit/qunit.js'][1442]++;
                    type = (typeof obj);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][1444]++;
  return type;
}), separator: (function () {
  _$jscoverage['qunit/qunit.js'][1447]++;
  return (this.multiline? (this.HTML? "<br />": "\n"): (this.HTML? "&nbsp;": " "));
}), indent: (function (extra) {
  _$jscoverage['qunit/qunit.js'][1450]++;
  if ((! this.multiline)) {
    _$jscoverage['qunit/qunit.js'][1451]++;
    return "";
  }
  _$jscoverage['qunit/qunit.js'][1453]++;
  var chr = this.indentChar;
  _$jscoverage['qunit/qunit.js'][1454]++;
  if (this.HTML) {
    _$jscoverage['qunit/qunit.js'][1455]++;
    chr = chr.replace(/\t/g, "   ").replace(/ /g, "&nbsp;");
  }
  _$jscoverage['qunit/qunit.js'][1457]++;
  return new Array((this._depth_ + (extra || 0))).join(chr);
}), up: (function (a) {
  _$jscoverage['qunit/qunit.js'][1460]++;
  this._depth_ += (a || 1);
}), down: (function (a) {
  _$jscoverage['qunit/qunit.js'][1463]++;
  this._depth_ -= (a || 1);
}), setParser: (function (name, parser) {
  _$jscoverage['qunit/qunit.js'][1466]++;
  this.parsers[name] = parser;
}), quote: quote, literal: literal, join: join, _depth_: 1, parsers: {window: "[Window]", document: "[Document]", error: "[ERROR]", unknown: "[Unknown]", "null": "null", "undefined": "undefined", "function": (function (fn) {
  _$jscoverage['qunit/qunit.js'][1483]++;
  var ret = "function", name = (("name" in fn)? fn.name: (reName.exec(fn) || [])[1]);
  _$jscoverage['qunit/qunit.js'][1486]++;
  if (name) {
    _$jscoverage['qunit/qunit.js'][1487]++;
    ret += (" " + name);
  }
  _$jscoverage['qunit/qunit.js'][1489]++;
  ret += "( ";
  _$jscoverage['qunit/qunit.js'][1491]++;
  ret = [ret, QUnit.jsDump.parse(fn, "functionArgs"), "){"].join("");
  _$jscoverage['qunit/qunit.js'][1492]++;
  return join(ret, QUnit.jsDump.parse(fn, "functionCode"), "}");
}), array: array, nodelist: array, "arguments": array, object: (function (map, stack) {
  _$jscoverage['qunit/qunit.js'][1498]++;
  var ret = [], keys, key, val, i;
  _$jscoverage['qunit/qunit.js'][1499]++;
  QUnit.jsDump.up();
  _$jscoverage['qunit/qunit.js'][1500]++;
  if (Object.keys) {
    _$jscoverage['qunit/qunit.js'][1501]++;
    keys = Object.keys(map);
  }
  else {
    _$jscoverage['qunit/qunit.js'][1503]++;
    keys = [];
    _$jscoverage['qunit/qunit.js'][1504]++;
    for (key in map) {
      _$jscoverage['qunit/qunit.js'][1505]++;
      keys.push(key);
}
  }
  _$jscoverage['qunit/qunit.js'][1508]++;
  keys.sort();
  _$jscoverage['qunit/qunit.js'][1509]++;
  for (i = 0; (i < keys.length); (i++)) {
    _$jscoverage['qunit/qunit.js'][1510]++;
    key = keys[i];
    _$jscoverage['qunit/qunit.js'][1511]++;
    val = map[key];
    _$jscoverage['qunit/qunit.js'][1512]++;
    ret.push((QUnit.jsDump.parse(key, "key") + ": " + QUnit.jsDump.parse(val, undefined, stack)));
}
  _$jscoverage['qunit/qunit.js'][1514]++;
  QUnit.jsDump.down();
  _$jscoverage['qunit/qunit.js'][1515]++;
  return join("{", ret, "}");
}), node: (function (node) {
  _$jscoverage['qunit/qunit.js'][1518]++;
  var a, val, open = (QUnit.jsDump.HTML? "&lt;": "<"), close = (QUnit.jsDump.HTML? "&gt;": ">"), tag = node.nodeName.toLowerCase(), ret = (open + tag);
  _$jscoverage['qunit/qunit.js'][1524]++;
  for (a in QUnit.jsDump.DOMAttrs) {
    _$jscoverage['qunit/qunit.js'][1525]++;
    val = node[QUnit.jsDump.DOMAttrs[a]];
    _$jscoverage['qunit/qunit.js'][1526]++;
    if (val) {
      _$jscoverage['qunit/qunit.js'][1527]++;
      ret += (" " + a + "=" + QUnit.jsDump.parse(val, "attribute"));
    }
}
  _$jscoverage['qunit/qunit.js'][1530]++;
  return (ret + close + open + "/" + tag + close);
}), functionArgs: (function (fn) {
  _$jscoverage['qunit/qunit.js'][1533]++;
  var args, l = fn.length;
  _$jscoverage['qunit/qunit.js'][1536]++;
  if ((! l)) {
    _$jscoverage['qunit/qunit.js'][1537]++;
    return "";
  }
  _$jscoverage['qunit/qunit.js'][1540]++;
  args = new Array(l);
  _$jscoverage['qunit/qunit.js'][1541]++;
  while ((l--)) {
    _$jscoverage['qunit/qunit.js'][1542]++;
    args[l] = String.fromCharCode((97 + l));
}
  _$jscoverage['qunit/qunit.js'][1544]++;
  return (" " + args.join(", ") + " ");
}), key: quote, functionCode: "[code]", attribute: quote, string: quote, date: quote, regexp: literal, number: literal, "boolean": literal}, DOMAttrs: {id: "id", name: "name", "class": "className"}, HTML: false, indentChar: "  ", multiline: true};
  _$jscoverage['qunit/qunit.js'][1566]++;
  return jsDump;
})();
  _$jscoverage['qunit/qunit.js'][1570]++;
  function getText(elems) {
    _$jscoverage['qunit/qunit.js'][1571]++;
    var i, elem, ret = "";
    _$jscoverage['qunit/qunit.js'][1574]++;
    for (i = 0; elems[i]; (i++)) {
      _$jscoverage['qunit/qunit.js'][1575]++;
      elem = elems[i];
      _$jscoverage['qunit/qunit.js'][1578]++;
      if (((elem.nodeType === 3) || (elem.nodeType === 4))) {
        _$jscoverage['qunit/qunit.js'][1579]++;
        ret += elem.nodeValue;
      }
      else {
        _$jscoverage['qunit/qunit.js'][1582]++;
        if ((elem.nodeType !== 8)) {
          _$jscoverage['qunit/qunit.js'][1583]++;
          ret += getText(elem.childNodes);
        }
      }
}
    _$jscoverage['qunit/qunit.js'][1587]++;
    return ret;
}
  _$jscoverage['qunit/qunit.js'][1591]++;
  function inArray(elem, array) {
    _$jscoverage['qunit/qunit.js'][1592]++;
    if (array.indexOf) {
      _$jscoverage['qunit/qunit.js'][1593]++;
      return array.indexOf(elem);
    }
    _$jscoverage['qunit/qunit.js'][1596]++;
    for (var i = 0, length = array.length; (i < length); (i++)) {
      _$jscoverage['qunit/qunit.js'][1597]++;
      if ((array[i] === elem)) {
        _$jscoverage['qunit/qunit.js'][1598]++;
        return i;
      }
}
    _$jscoverage['qunit/qunit.js'][1602]++;
    return -1;
}
  _$jscoverage['qunit/qunit.js'][1619]++;
  QUnit.diff = (function () {
  _$jscoverage['qunit/qunit.js'][1620]++;
  function diff(o, n) {
    _$jscoverage['qunit/qunit.js'][1621]++;
    var i, ns = {}, os = {};
    _$jscoverage['qunit/qunit.js'][1625]++;
    for (i = 0; (i < n.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][1626]++;
      if ((ns[n[i]] == null)) {
        _$jscoverage['qunit/qunit.js'][1627]++;
        ns[n[i]] = {rows: [], o: null};
      }
      _$jscoverage['qunit/qunit.js'][1632]++;
      ns[n[i]].rows.push(i);
}
    _$jscoverage['qunit/qunit.js'][1635]++;
    for (i = 0; (i < o.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][1636]++;
      if ((os[o[i]] == null)) {
        _$jscoverage['qunit/qunit.js'][1637]++;
        os[o[i]] = {rows: [], n: null};
      }
      _$jscoverage['qunit/qunit.js'][1642]++;
      os[o[i]].rows.push(i);
}
    _$jscoverage['qunit/qunit.js'][1645]++;
    for (i in ns) {
      _$jscoverage['qunit/qunit.js'][1646]++;
      if ((! hasOwn.call(ns, i))) {
        _$jscoverage['qunit/qunit.js'][1647]++;
        continue;
      }
      _$jscoverage['qunit/qunit.js'][1649]++;
      if (((ns[i].rows.length == 1) && ((typeof os[i]) != "undefined") && (os[i].rows.length == 1))) {
        _$jscoverage['qunit/qunit.js'][1650]++;
        n[ns[i].rows[0]] = {text: n[ns[i].rows[0]], row: os[i].rows[0]};
        _$jscoverage['qunit/qunit.js'][1654]++;
        o[os[i].rows[0]] = {text: o[os[i].rows[0]], row: ns[i].rows[0]};
      }
}
    _$jscoverage['qunit/qunit.js'][1661]++;
    for (i = 0; (i < (n.length - 1)); (i++)) {
      _$jscoverage['qunit/qunit.js'][1662]++;
      if (((n[i].text != null) && (n[(i + 1)].text == null) && ((n[i].row + 1) < o.length) && (o[(n[i].row + 1)].text == null) && (n[(i + 1)] == o[(n[i].row + 1)]))) {
        _$jscoverage['qunit/qunit.js'][1665]++;
        n[(i + 1)] = {text: n[(i + 1)], row: (n[i].row + 1)};
        _$jscoverage['qunit/qunit.js'][1669]++;
        o[(n[i].row + 1)] = {text: o[(n[i].row + 1)], row: (i + 1)};
      }
}
    _$jscoverage['qunit/qunit.js'][1676]++;
    for (i = (n.length - 1); (i > 0); (i--)) {
      _$jscoverage['qunit/qunit.js'][1677]++;
      if (((n[i].text != null) && (n[(i - 1)].text == null) && (n[i].row > 0) && (o[(n[i].row - 1)].text == null) && (n[(i - 1)] == o[(n[i].row - 1)]))) {
        _$jscoverage['qunit/qunit.js'][1680]++;
        n[(i - 1)] = {text: n[(i - 1)], row: (n[i].row - 1)};
        _$jscoverage['qunit/qunit.js'][1684]++;
        o[(n[i].row - 1)] = {text: o[(n[i].row - 1)], row: (i - 1)};
      }
}
    _$jscoverage['qunit/qunit.js'][1691]++;
    return ({o: o, n: n});
}
  _$jscoverage['qunit/qunit.js'][1697]++;
  return (function (o, n) {
  _$jscoverage['qunit/qunit.js'][1698]++;
  o = o.replace(/\s+$/, "");
  _$jscoverage['qunit/qunit.js'][1699]++;
  n = n.replace(/\s+$/, "");
  _$jscoverage['qunit/qunit.js'][1701]++;
  var i, pre, str = "", out = diff(((o === "")? []: o.split(/\s+/)), ((n === "")? []: n.split(/\s+/))), oSpace = o.match(/\s+/g), nSpace = n.match(/\s+/g);
  _$jscoverage['qunit/qunit.js'][1707]++;
  if ((oSpace == null)) {
    _$jscoverage['qunit/qunit.js'][1708]++;
    oSpace = [" "];
  }
  else {
    _$jscoverage['qunit/qunit.js'][1711]++;
    oSpace.push(" ");
  }
  _$jscoverage['qunit/qunit.js'][1714]++;
  if ((nSpace == null)) {
    _$jscoverage['qunit/qunit.js'][1715]++;
    nSpace = [" "];
  }
  else {
    _$jscoverage['qunit/qunit.js'][1718]++;
    nSpace.push(" ");
  }
  _$jscoverage['qunit/qunit.js'][1721]++;
  if ((out.n.length === 0)) {
    _$jscoverage['qunit/qunit.js'][1722]++;
    for (i = 0; (i < out.o.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][1723]++;
      str += ("<del>" + out.o[i] + oSpace[i] + "</del>");
}
  }
  else {
    _$jscoverage['qunit/qunit.js'][1727]++;
    if ((out.n[0].text == null)) {
      _$jscoverage['qunit/qunit.js'][1728]++;
      for (n = 0; ((n < out.o.length) && (out.o[n].text == null)); (n++)) {
        _$jscoverage['qunit/qunit.js'][1729]++;
        str += ("<del>" + out.o[n] + oSpace[n] + "</del>");
}
    }
    _$jscoverage['qunit/qunit.js'][1733]++;
    for (i = 0; (i < out.n.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][1734]++;
      if ((out.n[i].text == null)) {
        _$jscoverage['qunit/qunit.js'][1735]++;
        str += ("<ins>" + out.n[i] + nSpace[i] + "</ins>");
      }
      else {
        _$jscoverage['qunit/qunit.js'][1739]++;
        pre = "";
        _$jscoverage['qunit/qunit.js'][1741]++;
        for (n = (out.n[i].row + 1); ((n < out.o.length) && (out.o[n].text == null)); (n++)) {
          _$jscoverage['qunit/qunit.js'][1742]++;
          pre += ("<del>" + out.o[n] + oSpace[n] + "</del>");
}
        _$jscoverage['qunit/qunit.js'][1744]++;
        str += (" " + out.n[i].text + nSpace[i] + pre);
      }
}
  }
  _$jscoverage['qunit/qunit.js'][1749]++;
  return str;
});
})();
  _$jscoverage['qunit/qunit.js'][1754]++;
  if (((typeof exports) !== "undefined")) {
    _$jscoverage['qunit/qunit.js'][1755]++;
    extend(exports, QUnit);
  }
})((function () {
  _$jscoverage['qunit/qunit.js'][1759]++;
  return this;
}).call());
